// Code generated by goyacc -o parser.go -l -p lua luaWithType.y. DO NOT EDIT.
package syntax

import __yyfmt__ "fmt"

type luaSymType struct {
	yys   int
	token Token

	stmts []Stmt
	stmt  Stmt

	exprs []Expr
	expr  Expr

	node Node
}

const TAnd = 57346
const TBreak = 57347
const TDo = 57348
const TElse = 57349
const TElseIf = 57350
const TEnd = 57351
const TFalse = 57352
const TFor = 57353
const TFunction = 57354
const TGoto = 57355
const TIf = 57356
const TIn = 57357
const TLocal = 57358
const TNil = 57359
const TNot = 57360
const TOr = 57361
const TRepeat = 57362
const TReturn = 57363
const TThen = 57364
const TTrue = 57365
const TUntil = 57366
const TWhile = 57367
const TName = 57368
const TEqual = 57369
const TNequal = 57370
const TLequal = 57371
const TBequal = 57372
const TLmove = 57373
const TRmove = 57374
const TWdiv = 57375
const TTarget = 57376
const TConn = 57377
const TAny = 57378
const TString = 57379
const TNumber = 57380
const TAType = 57381
const TSType = 57382
const UNARY = 57383

var luaToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TAnd",
	"TBreak",
	"TDo",
	"TElse",
	"TElseIf",
	"TEnd",
	"TFalse",
	"TFor",
	"TFunction",
	"TGoto",
	"TIf",
	"TIn",
	"TLocal",
	"TNil",
	"TNot",
	"TOr",
	"TRepeat",
	"TReturn",
	"TThen",
	"TTrue",
	"TUntil",
	"TWhile",
	"TName",
	"TEqual",
	"TNequal",
	"TLequal",
	"TBequal",
	"TLmove",
	"TRmove",
	"TWdiv",
	"TTarget",
	"TConn",
	"TAny",
	"TString",
	"TNumber",
	"TAType",
	"TSType",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"'#'",
	"'&'",
	"'~'",
	"'|'",
	"'<'",
	"'>'",
	"'='",
	"'('",
	"')'",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"';'",
	"':'",
	"','",
	"'.'",
	"UNARY",
}

var luaStatenames = [...]string{}

const luaEofCode = 1
const luaErrCode = 2
const luaInitialStackSize = 16

var luaExca = [...]int{
	-1, 0,
	1, 2,
	-2, 0,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	1, 3,
	7, 3,
	8, 3,
	9, 3,
	24, 3,
	-2, 0,
	-1, 10,
	1, 13,
	2, 13,
	5, 13,
	6, 13,
	7, 13,
	8, 13,
	9, 13,
	11, 13,
	12, 13,
	13, 13,
	14, 13,
	16, 13,
	20, 13,
	21, 13,
	24, 13,
	25, 13,
	26, 13,
	34, 13,
	53, 13,
	60, 13,
	-2, 140,
	-1, 14,
	1, 2,
	7, 2,
	8, 2,
	9, 2,
	24, 2,
	-2, 0,
	-1, 16,
	1, 2,
	7, 2,
	8, 2,
	9, 2,
	24, 2,
	-2, 0,
	-1, 17,
	1, 2,
	7, 2,
	8, 2,
	9, 2,
	24, 2,
	-2, 0,
	-1, 22,
	1, 85,
	2, 85,
	5, 85,
	6, 85,
	7, 85,
	8, 85,
	9, 85,
	11, 85,
	12, 85,
	13, 85,
	14, 85,
	16, 85,
	20, 85,
	21, 85,
	24, 85,
	25, 85,
	26, 85,
	34, 85,
	53, 85,
	60, 85,
	62, 85,
	-2, 139,
	-1, 56,
	9, 2,
	-2, 0,
	-1, 59,
	7, 2,
	8, 2,
	9, 2,
	-2, 0,
	-1, 64,
	1, 2,
	7, 2,
	8, 2,
	9, 2,
	24, 2,
	-2, 0,
	-1, 125,
	37, 139,
	54, 139,
	56, 139,
	58, 139,
	61, 139,
	63, 139,
	-2, 86,
	-1, 127,
	1, 2,
	7, 2,
	8, 2,
	9, 2,
	24, 2,
	-2, 0,
	-1, 130,
	1, 2,
	7, 2,
	8, 2,
	9, 2,
	24, 2,
	-2, 0,
	-1, 134,
	9, 2,
	-2, 0,
	-1, 198,
	9, 2,
	-2, 0,
	-1, 201,
	9, 2,
	-2, 0,
	-1, 206,
	9, 2,
	-2, 0,
	-1, 208,
	9, 2,
	-2, 0,
	-1, 217,
	9, 2,
	-2, 0,
	-1, 225,
	9, 2,
	-2, 0,
	-1, 229,
	9, 2,
	-2, 0,
	-1, 233,
	1, 2,
	7, 2,
	8, 2,
	9, 2,
	24, 2,
	-2, 0,
	-1, 236,
	9, 2,
	-2, 0,
	-1, 241,
	1, 2,
	7, 2,
	8, 2,
	9, 2,
	24, 2,
	-2, 0,
	-1, 244,
	1, 2,
	7, 2,
	8, 2,
	9, 2,
	24, 2,
	-2, 0,
	-1, 246,
	9, 2,
	-2, 0,
	-1, 249,
	9, 2,
	-2, 0,
	-1, 259,
	1, 2,
	7, 2,
	8, 2,
	9, 2,
	24, 2,
	-2, 0,
	-1, 269,
	9, 2,
	-2, 0,
	-1, 273,
	1, 2,
	7, 2,
	8, 2,
	9, 2,
	24, 2,
	-2, 0,
}

const luaPrivate = 57344

const luaLast = 1484

var luaAct = [...]int{
	49, 25, 132, 120, 25, 26, 185, 65, 233, 188,
	82, 187, 208, 26, 53, 25, 137, 25, 25, 62,
	70, 73, 39, 78, 141, 83, 142, 80, 74, 48,
	215, 76, 89, 117, 79, 148, 77, 89, 116, 218,
	69, 216, 71, 29, 138, 88, 81, 89, 69, 121,
	71, 117, 82, 52, 26, 95, 26, 25, 50, 30,
	25, 81, 70, 138, 89, 25, 182, 51, 89, 80,
	143, 48, 144, 145, 134, 55, 72, 58, 239, 64,
	153, 236, 117, 217, 189, 181, 86, 87, 66, 26,
	26, 156, 85, 26, 124, 26, 152, 84, 129, 26,
	111, 112, 113, 114, 115, 238, 140, 277, 123, 276,
	139, 146, 147, 241, 199, 240, 272, 75, 184, 149,
	271, 133, 270, 135, 155, 183, 63, 266, 25, 265,
	264, 25, 262, 257, 196, 25, 150, 254, 252, 207,
	251, 248, 209, 210, 225, 199, 224, 243, 231, 157,
	158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 198, 199, 197, 222, 204, 81, 214, 193, 46,
	22, 205, 190, 22, 211, 126, 186, 121, 119, 194,
	219, 4, 212, 200, 22, 27, 22, 22, 223, 25,
	5, 180, 25, 37, 28, 68, 67, 25, 11, 25,
	101, 100, 94, 8, 102, 3, 1, 0, 25, 207,
	90, 91, 92, 93, 96, 95, 25, 97, 98, 99,
	25, 125, 0, 0, 25, 0, 22, 25, 0, 22,
	0, 0, 25, 0, 22, 25, 123, 25, 0, 220,
	25, 0, 38, 23, 0, 0, 23, 0, 0, 227,
	25, 0, 0, 232, 0, 0, 0, 23, 21, 23,
	25, 12, 14, 0, 25, 0, 0, 18, 19, 13,
	17, 0, 20, 94, 0, 0, 16, 6, 245, 0,
	0, 15, 26, 92, 93, 96, 95, 0, 0, 255,
	24, 0, 0, 0, 23, 0, 0, 22, 0, 23,
	22, 0, 23, 0, 22, 0, 109, 23, 259, 9,
	268, 0, 0, 0, 0, 0, 7, 0, 0, 0,
	0, 110, 0, 0, 47, 10, 0, 0, 10, 107,
	108, 104, 106, 101, 100, 94, 0, 102, 0, 10,
	0, 10, 10, 90, 91, 92, 93, 96, 95, 0,
	97, 98, 99, 103, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 0, 22, 0,
	23, 22, 0, 23, 0, 0, 22, 23, 22, 0,
	0, 10, 0, 0, 10, 0, 0, 22, 0, 10,
	0, 0, 0, 0, 0, 22, 0, 0, 0, 22,
	0, 0, 0, 22, 0, 0, 22, 0, 0, 2,
	0, 22, 0, 0, 22, 0, 22, 0, 0, 22,
	0, 101, 100, 94, 54, 102, 57, 60, 0, 22,
	0, 90, 91, 92, 93, 96, 95, 0, 97, 22,
	0, 23, 0, 22, 23, 0, 0, 0, 0, 23,
	0, 23, 10, 0, 32, 10, 45, 0, 0, 10,
	23, 31, 41, 0, 0, 0, 128, 33, 23, 131,
	26, 0, 23, 0, 136, 0, 23, 0, 0, 23,
	36, 35, 34, 0, 23, 0, 40, 23, 0, 23,
	0, 42, 23, 43, 0, 0, 0, 0, 44, 0,
	48, 0, 23, 191, 0, 0, 0, 101, 100, 94,
	0, 102, 23, 0, 0, 0, 23, 90, 91, 92,
	93, 96, 95, 10, 97, 98, 10, 0, 0, 0,
	0, 10, 0, 10, 0, 0, 0, 192, 0, 0,
	195, 0, 10, 0, 202, 0, 0, 0, 0, 0,
	10, 0, 0, 0, 10, 0, 0, 0, 10, 0,
	32, 10, 45, 0, 0, 0, 10, 31, 41, 10,
	94, 10, 102, 33, 10, 0, 26, 0, 90, 91,
	92, 93, 96, 95, 10, 0, 36, 35, 34, 0,
	0, 0, 40, 0, 10, 0, 0, 42, 10, 43,
	0, 0, 0, 0, 44, 0, 48, 0, 226, 151,
	0, 230, 0, 0, 0, 0, 234, 269, 235, 0,
	0, 32, 0, 45, 0, 0, 0, 237, 31, 41,
	0, 0, 0, 0, 33, 242, 0, 26, 0, 247,
	0, 0, 0, 250, 0, 0, 253, 36, 35, 34,
	0, 256, 0, 40, 258, 0, 261, 0, 42, 263,
	43, 0, 0, 0, 0, 44, 0, 48, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 21, 0, 274,
	12, 14, 0, 275, 0, 32, 18, 61, 13, 17,
	0, 20, 31, 41, 0, 16, 6, 59, 33, 0,
	15, 26, 0, 0, 0, 0, 0, 0, 0, 24,
	0, 36, 35, 34, 0, 0, 0, 40, 109, 0,
	229, 0, 42, 0, 43, 0, 0, 0, 9, 44,
	0, 48, 0, 110, 0, 7, 0, 0, 0, 0,
	0, 107, 108, 104, 106, 101, 100, 94, 0, 102,
	0, 0, 0, 0, 109, 90, 91, 92, 93, 96,
	95, 0, 97, 98, 99, 103, 105, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 228, 107, 108, 104,
	106, 101, 100, 94, 0, 102, 0, 0, 0, 0,
	109, 90, 91, 92, 93, 96, 95, 0, 97, 98,
	99, 103, 105, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 203, 107, 108, 104, 106, 101, 100, 94,
	0, 102, 0, 0, 109, 0, 0, 90, 91, 92,
	93, 96, 95, 0, 97, 98, 99, 103, 105, 110,
	0, 0, 0, 0, 0, 221, 0, 107, 108, 104,
	106, 101, 100, 94, 0, 102, 0, 0, 109, 0,
	0, 90, 91, 92, 93, 96, 95, 0, 97, 98,
	99, 103, 105, 110, 0, 0, 0, 0, 0, 213,
	0, 107, 108, 104, 106, 101, 100, 94, 0, 102,
	0, 0, 109, 0, 273, 90, 91, 92, 93, 96,
	95, 0, 97, 98, 99, 103, 105, 110, 0, 179,
	0, 0, 0, 0, 0, 107, 108, 104, 106, 101,
	100, 94, 0, 102, 0, 0, 109, 0, 249, 90,
	91, 92, 93, 96, 95, 0, 97, 98, 99, 103,
	105, 110, 0, 0, 0, 0, 0, 0, 0, 107,
	108, 104, 106, 101, 100, 94, 0, 102, 0, 0,
	109, 0, 0, 90, 91, 92, 93, 96, 95, 0,
	97, 98, 99, 103, 105, 110, 0, 0, 244, 0,
	0, 0, 0, 107, 108, 104, 106, 101, 100, 94,
	0, 102, 0, 0, 109, 0, 0, 90, 91, 92,
	93, 96, 95, 0, 97, 98, 99, 103, 105, 110,
	0, 0, 130, 0, 0, 0, 0, 107, 108, 104,
	106, 101, 100, 94, 0, 102, 0, 0, 109, 0,
	127, 90, 91, 92, 93, 96, 95, 0, 97, 98,
	99, 103, 105, 110, 0, 0, 0, 0, 0, 0,
	0, 107, 108, 104, 106, 101, 100, 94, 0, 102,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 96,
	95, 0, 97, 98, 99, 103, 105, 32, 0, 45,
	0, 0, 0, 0, 31, 41, 0, 101, 100, 94,
	33, 102, 0, 26, 0, 0, 0, 90, 91, 92,
	93, 96, 95, 36, 35, 34, 0, 109, 0, 40,
	0, 0, 0, 0, 42, 0, 43, 0, 0, 0,
	0, 44, 110, 48, 118, 122, 0, 0, 0, 0,
	107, 108, 104, 106, 101, 100, 94, 0, 102, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 96, 95,
	0, 97, 98, 99, 103, 105, 32, 0, 45, 0,
	0, 0, 0, 31, 41, 0, 0, 0, 0, 33,
	0, 0, 26, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 36, 35, 34, 109, 0, 0, 40, 0,
	0, 0, 0, 42, 0, 43, 0, 0, 0, 0,
	44, 0, 48, 0, 122, 0, 0, 0, 107, 108,
	104, 106, 101, 100, 94, 0, 102, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 96, 95, 0, 97,
	98, 99, 103, 105, 246, 0, 0, 0, 32, 0,
	45, 0, 0, 0, 0, 31, 41, 0, 0, 0,
	0, 33, 0, 0, 26, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 35, 34, 0, 0, 0,
	40, 0, 0, 0, 0, 42, 0, 43, 0, 0,
	0, 0, 44, 0, 48, 107, 108, 104, 106, 101,
	100, 94, 0, 102, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 96, 95, 0, 97, 98, 99, 103,
	105, 206, 0, 0, 0, 32, 0, 45, 0, 0,
	0, 0, 31, 41, 0, 0, 0, 0, 33, 0,
	0, 26, 0, 201, 0, 0, 0, 32, 0, 45,
	0, 36, 35, 34, 31, 41, 0, 40, 0, 0,
	33, 0, 42, 26, 43, 0, 0, 0, 0, 44,
	0, 48, 0, 36, 35, 34, 0, 0, 0, 40,
	0, 32, 0, 45, 42, 0, 43, 0, 31, 41,
	0, 44, 0, 48, 33, 0, 0, 26, 0, 56,
	0, 0, 0, 32, 0, 45, 0, 36, 35, 34,
	31, 41, 0, 40, 0, 0, 33, 0, 42, 26,
	43, 0, 0, 0, 0, 44, 154, 48, 0, 36,
	35, 34, 0, 0, 0, 40, 0, 32, 0, 45,
	42, 0, 43, 0, 31, 41, 0, 44, 0, 48,
	33, 0, 0, 26, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 36, 35, 34, 0, 0, 0, 40,
	0, 0, 0, 0, 42, 0, 43, 0, 0, 0,
	0, 44, 0, 48,
}

var luaPact = [...]int{
	266, -1000, -1000, 266, -1000, -1000, 1427, -1000, 5, 1427,
	-1000, -1000, -1000, 67, 266, 1393, 266, 685, 73, -13,
	64, -1000, -1000, -27, 63, 58, 47, -1000, -1000, -15,
	1113, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -27, -1000,
	1427, 1427, 1427, 1427, 1427, -3, -1000, -1000, 1077, -1000,
	1427, 67, -30, -1000, 176, 1034, 266, 74, 1000, 266,
	-1000, -21, 68, 1427, 266, 1, 1427, -3, -37, 67,
	-1000, 67, 28, -3, -18, 1427, 560, 70, -1000, 67,
	1371, -1000, -1000, 57, -1000, -1000, -1000, -1000, -1000, 1427,
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
	1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
	1427, 9, 9, 9, 9, 864, -1000, 30, -1000, -51,
	-1000, 31, 454, 1113, -30, -1000, -1000, 266, 169, 1427,
	266, -1000, 164, 1337, 266, 760, 166, 1315, 67, 6,
	-1000, 67, 67, -1000, -1000, -3, -1000, -1000, 1427, -30,
	830, -1000, -1000, 15, -1000, -25, -1000, 1113, 250, 250,
	9, 9, 9, 9, 9, 1066, 400, 486, 547, 547,
	547, 179, 179, 179, 179, 179, 179, 1268, 1191, -1000,
	-14, 43, -1000, -23, -1000, -1000, 1156, -1000, -1000, 1427,
	796, -1000, 165, -1000, 1113, -1000, 137, -1000, 266, 1427,
	724, 266, 139, 1427, -1000, 2, 266, -1000, 266, -1000,
	-1000, -1000, -30, -1000, -1000, -1000, 41, 266, 69, -1000,
	1113, 25, -1000, 106, -1000, 266, 138, 966, 1238, 266,
	132, -1000, 932, 266, 131, 129, 266, 128, -1000, 1427,
	-1000, 266, 124, -1000, 266, 312, 266, 123, -1000, 266,
	121, -1000, -1000, 120, -1000, 1113, 118, -1000, -1000, 266,
	621, 113, -1000, 111, -1000, -1000, -1000, 107, 898, 266,
	-1000, -1000, -1000, 266, 100, 98, -1000, -1000,
}

var luaPgo = [...]int{
	0, 216, 419, 215, 200, 191, 213, 43, 334, 208,
	2, 206, 205, 179, 7, 59, 203, 38, 252, 23,
	201, 22, 188, 3, 186, 0,
}

var luaR1 = [...]int{
	0, 1, 2, 2, 2, 2, 3, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 10, 10, 5,
	5, 5, 9, 9, 9, 9, 9, 11, 11, 11,
	11, 12, 12, 12, 12, 6, 6, 6, 13, 13,
	13, 13, 13, 13, 13, 25, 25, 25, 14, 14,
	14, 7, 7, 7, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 18,
	18, 8, 8, 8, 8, 19, 19, 19, 19, 19,
	19, 16, 16, 17, 17, 17, 20, 20, 20, 21,
	21, 21, 21, 22, 22, 22, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 24, 24,
}

var luaR2 = [...]int{
	0, 1, 0, 1, 1, 2, 1, 2, 1, 3,
	1, 2, 2, 1, 1, 1, 2, 1, 3, 2,
	5, 4, 4, 2, 1, 4, 3, 2, 6, 5,
	5, 4, 3, 8, 7, 7, 6, 9, 8, 8,
	4, 3, 5, 6, 7, 8, 11, 10, 10, 7,
	6, 6, 6, 4, 3, 2, 4, 3, 3, 3,
	2, 4, 3, 3, 2, 1, 1, 0, 5, 1,
	2, 3, 3, 2, 2, 2, 1, 1, 3, 2,
	2, 1, 3, 2, 2, 1, 3, 2, 1, 4,
	3, 3, 2, 3, 2, 1, 2, 2, 1, 3,
	2, 1, 3, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 3, 1,
	1, 2, 4, 3, 2, 2, 1, 3, 2, 1,
	1, 2, 1, 6, 2, 5, 1, 1, 3, 2,
	1, 3, 2, 1, 3, 2, 3, 2, 5, 4,
	3, 2, 1, 2, 1, 1, 1,
}

var luaChk = [...]int{
	-1000, -1, -2, -3, -5, -4, 21, 60, -6, 53,
	-8, -9, 5, 13, 6, 25, 20, 14, 11, 12,
	16, 2, -13, -18, 34, -25, 26, -5, -4, -7,
	-15, 17, 10, 23, 38, 37, 36, -16, -18, -21,
	42, 18, 47, 49, 54, 12, -13, -8, 56, -25,
	53, 62, -7, -25, -2, -15, 6, -2, -15, 22,
	-2, 12, -25, 53, 6, -14, 15, -11, -12, 61,
	-25, 63, 12, -25, -14, 53, 58, 63, -19, 61,
	54, -21, 37, -25, 34, 34, 39, 40, 60, 62,
	41, 42, 43, 44, 33, 46, 45, 48, 49, 50,
	32, 31, 35, 51, 29, 52, 30, 27, 28, 4,
	19, -15, -15, -15, -15, -15, -17, 54, 57, -22,
	-23, -25, 58, -15, -7, -13, 9, 6, -2, 24,
	22, -2, -10, 53, 6, -15, -2, 15, 62, -7,
	-17, 61, 63, -25, -25, -25, -17, -17, 53, -7,
	-15, 59, 26, -25, 55, -7, 34, -15, -15, -15,
	-15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
	-15, -15, -15, -15, -15, -15, -15, -15, -15, 55,
	-20, 55, 36, -14, -25, 57, -24, 62, 60, 53,
	-15, 59, -2, 9, -15, -2, -10, 9, 7, 8,
	-15, 6, -2, 62, 9, -7, 6, -25, 6, -25,
	-25, -17, -7, 59, -19, 55, 55, 40, 62, -23,
	-15, 59, 9, -10, 9, 7, -2, -15, 62, 6,
	-2, 9, -15, 6, -2, -2, 40, -2, 36, 53,
	9, 7, -2, 9, 22, -15, 6, -2, 9, 6,
	-2, 9, 9, -2, 9, -15, -2, 9, -2, 6,
	62, -2, 9, -2, 9, 9, 9, -2, -15, 6,
	9, 9, 9, 6, -2, -2, 9, 9,
}

var luaDef = [...]int{
	-2, -2, 1, -2, 4, 6, 69, 8, 10, 0,
	-2, 14, 15, 17, -2, 24, -2, -2, 0, 0,
	65, 66, -2, 0, 76, 88, 95, 5, 7, 70,
	101, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	0, 0, 0, 0, 0, 152, 139, 140, 160, 88,
	11, 87, 12, 16, 19, 23, -2, 27, 0, -2,
	67, 152, 98, 0, -2, 0, 0, 55, 77, 0,
	81, 0, 60, 98, 64, 0, 92, 94, 141, 144,
	146, 149, 150, 74, 75, 73, 96, 97, 71, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 135, 136, 137, 0, 151, 0, 159, 162,
	163, 88, 172, 174, 9, -2, 18, -2, 0, 26,
	-2, 67, 32, 0, -2, 0, 41, 0, 100, 0,
	54, 79, 83, 80, 84, 59, 57, 58, 62, 63,
	91, 90, 93, 143, 145, 148, 72, 102, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 138,
	154, 0, 156, 157, 98, 161, 165, 175, 176, 167,
	173, 171, 21, 22, 25, 67, 0, 31, -2, 0,
	0, -2, 0, 0, 40, 53, -2, 99, -2, 78,
	82, 56, 61, 89, 142, 147, 0, -2, 100, 164,
	166, 170, 20, 29, 30, -2, 0, 0, 0, -2,
	0, 42, 0, -2, 0, 0, -2, 0, 158, 169,
	28, -2, 0, 36, -2, 0, -2, 0, 43, -2,
	52, 51, 50, 0, 155, 168, 35, 34, 68, -2,
	0, 0, 44, 0, 49, 153, 33, 38, 0, -2,
	45, 39, 37, -2, 0, 48, 47, 46,
}

var luaTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 47, 3, 45, 48, 3,
	54, 55, 43, 41, 62, 42, 63, 44, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 61, 60,
	51, 53, 52, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 58, 3, 59, 46, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 56, 50, 57, 49,
}

var luaTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 64,
}

var luaTok3 = [...]int{
	0,
}

var luaErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	luaDebug        = 0
	luaErrorVerbose = false
)

type luaLexer interface {
	Lex(lval *luaSymType) int
	Error(s string)
}

type luaParser interface {
	Parse(luaLexer) int
	Lookahead() int
}

type luaParserImpl struct {
	lval  luaSymType
	stack [luaInitialStackSize]luaSymType
	char  int
}

func (p *luaParserImpl) Lookahead() int {
	return p.char
}

func luaNewParser() luaParser {
	return &luaParserImpl{}
}

const luaFlag = -1000

func luaTokname(c int) string {
	if c >= 1 && c-1 < len(luaToknames) {
		if luaToknames[c-1] != "" {
			return luaToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func luaStatname(s int) string {
	if s >= 0 && s < len(luaStatenames) {
		if luaStatenames[s] != "" {
			return luaStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func luaErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !luaErrorVerbose {
		return "syntax error"
	}

	for _, e := range luaErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + luaTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := luaPact[state]
	for tok := TOKSTART; tok-1 < len(luaToknames); tok++ {
		if n := base + tok; n >= 0 && n < luaLast && luaChk[luaAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if luaDef[state] == -2 {
		i := 0
		for luaExca[i] != -1 || luaExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; luaExca[i] >= 0; i += 2 {
			tok := luaExca[i]
			if tok < TOKSTART || luaExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if luaExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += luaTokname(tok)
	}
	return res
}

func lualex1(lex luaLexer, lval *luaSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = luaTok1[0]
		goto out
	}
	if char < len(luaTok1) {
		token = luaTok1[char]
		goto out
	}
	if char >= luaPrivate {
		if char < luaPrivate+len(luaTok2) {
			token = luaTok2[char-luaPrivate]
			goto out
		}
	}
	for i := 0; i < len(luaTok3); i += 2 {
		token = luaTok3[i+0]
		if token == char {
			token = luaTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = luaTok2[1] /* unknown char */
	}
	if luaDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", luaTokname(token), uint(char))
	}
	return char, token
}

func luaParse(lualex luaLexer) int {
	return luaNewParser().Parse(lualex)
}

func (luarcvr *luaParserImpl) Parse(lualex luaLexer) int {
	var luan int
	var luaVAL luaSymType
	var luaDollar []luaSymType
	_ = luaDollar // silence set and not used
	luaS := luarcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	luastate := 0
	luarcvr.char = -1
	luatoken := -1 // luarcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		luastate = -1
		luarcvr.char = -1
		luatoken = -1
	}()
	luap := -1
	goto luastack

ret0:
	return 0

ret1:
	return 1

luastack:
	/* put a state and value onto the stack */
	if luaDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", luaTokname(luatoken), luaStatname(luastate))
	}

	luap++
	if luap >= len(luaS) {
		nyys := make([]luaSymType, len(luaS)*2)
		copy(nyys, luaS)
		luaS = nyys
	}
	luaS[luap] = luaVAL
	luaS[luap].yys = luastate

luanewstate:
	luan = luaPact[luastate]
	if luan <= luaFlag {
		goto luadefault /* simple state */
	}
	if luarcvr.char < 0 {
		luarcvr.char, luatoken = lualex1(lualex, &luarcvr.lval)
	}
	luan += luatoken
	if luan < 0 || luan >= luaLast {
		goto luadefault
	}
	luan = luaAct[luan]
	if luaChk[luan] == luatoken { /* valid shift */
		luarcvr.char = -1
		luatoken = -1
		luaVAL = luarcvr.lval
		luastate = luan
		if Errflag > 0 {
			Errflag--
		}
		goto luastack
	}

luadefault:
	/* default state action */
	luan = luaDef[luastate]
	if luan == -2 {
		if luarcvr.char < 0 {
			luarcvr.char, luatoken = lualex1(lualex, &luarcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if luaExca[xi+0] == -1 && luaExca[xi+1] == luastate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			luan = luaExca[xi+0]
			if luan < 0 || luan == luatoken {
				break
			}
		}
		luan = luaExca[xi+1]
		if luan < 0 {
			goto ret0
		}
	}
	if luan == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			lualex.Error(luaErrorMessage(luastate, luatoken))
			Nerrs++
			if luaDebug >= 1 {
				__yyfmt__.Printf("%s", luaStatname(luastate))
				__yyfmt__.Printf(" saw %s\n", luaTokname(luatoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for luap >= 0 {
				luan = luaPact[luaS[luap].yys] + luaErrCode
				if luan >= 0 && luan < luaLast {
					luastate = luaAct[luan] /* simulate a shift of "error" */
					if luaChk[luastate] == luaErrCode {
						goto luastack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if luaDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", luaS[luap].yys)
				}
				luap--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if luaDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", luaTokname(luatoken))
			}
			if luatoken == luaEofCode {
				goto ret1
			}
			luarcvr.char = -1
			luatoken = -1
			goto luanewstate /* try again in the same state */
		}
	}

	/* reduction by production luan */
	if luaDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", luan, luaStatname(luastate))
	}

	luant := luan
	luapt := luap
	_ = luapt // guard against "declared and not used"

	luap -= luaR2[luan]
	// luap is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if luap+1 >= len(luaS) {
		nyys := make([]luaSymType, len(luaS)*2)
		copy(nyys, luaS)
		luaS = nyys
	}
	luaVAL = luaS[luap+1]

	/* consult goto table to find next state */
	luan = luaR1[luan]
	luag := luaPgo[luan]
	luaj := luag + luaS[luap].yys + 1

	if luaj >= luaLast {
		luastate = luaAct[luag]
	} else {
		luastate = luaAct[luaj]
		if luaChk[luastate] != -luan {
			luastate = luaAct[luag]
		}
	}
	// dummy call; replaced with literal code
	switch luant {

	case 1:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.stmts = luaDollar[1].stmts
			if l, ok := lualex.(*Lexer); ok {
				l.Block = luaVAL.stmts
			}
		}
	case 2:
		luaDollar = luaS[luapt-0 : luapt+1]
		{
			luaVAL.stmts = []Stmt{}
		}
	case 3:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.stmts = luaDollar[1].stmts
		}
	case 4:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.stmts = []Stmt{luaDollar[1].stmt}
		}
	case 5:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.stmts = append(luaDollar[1].stmts, luaDollar[2].stmt)
		}
	case 6:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			if luaDollar[1].stmt != nil {
				luaVAL.stmts = []Stmt{luaDollar[1].stmt}
			} else {
				luaVAL.stmts = []Stmt{}
			}
		}
	case 7:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			if luaDollar[2].stmt != nil {
				luaVAL.stmts = append(luaDollar[1].stmts, luaDollar[2].stmt)
			} else {
				luaVAL.stmts = luaDollar[1].stmts
			}
		}
	case 8:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.stmt = nil
		}
	case 9:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &AssignStmt{Left: luaDollar[1].exprs, Right: luaDollar[3].exprs}
			temp.Start = luaDollar[1].exprs[0].start()
			if len(luaDollar[3].exprs) > 0 {
				temp.End = luaDollar[3].exprs[len(luaDollar[3].exprs)-1].end()
			} else {
				temp.End = luaDollar[2].token.End
			}

			luaVAL.stmt = temp
		}
	case 10:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &AssignStmt{Left: luaDollar[1].exprs, Right: nil}
			temp.Start = luaDollar[1].exprs[0].start()
			temp.End = luaDollar[1].exprs[0].end()
			temp.Err = &SyntaxErr{Info: "赋值表达式缺少等于右值"}
			temp.Err.Scope = temp.Scope
			luaVAL.stmt = temp
		}
	case 11:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &AssignStmt{Left: luaDollar[1].exprs, Right: nil}
			temp.Start = luaDollar[1].exprs[0].start()
			temp.End = luaDollar[2].token.End
			temp.Err = &SyntaxErr{Info: "赋值表达式缺少右值"}
			temp.Err.Scope = luaDollar[2].token.Scope
			luaVAL.stmt = temp
		}
	case 12:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &AssignStmt{Left: nil, Right: luaDollar[2].exprs}
			temp.Start = luaDollar[1].token.Start
			if len(luaDollar[2].exprs) > 0 {
				temp.End = luaDollar[2].exprs[len(luaDollar[2].exprs)-1].end()
			} else {
				temp.End = luaDollar[1].token.End
			}
			temp.Err = &SyntaxErr{Info: "赋值表达式缺少左值"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.stmt = temp
		}
	case 13:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			if funstmt, ok := luaDollar[1].node.(*FuncCall); !ok {
				lualex.(*Lexer).Error("parse error")
			} else {
				luaVAL.stmt = funstmt
			}
		}
	case 14:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.stmt = luaDollar[1].stmt
		}
	case 15:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.stmt = &BreakStmt{}
			luaVAL.stmt.(*BreakStmt).Scope = luaDollar[1].token.Scope
		}
	case 16:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &GotoStmt{Name: luaDollar[2].expr}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[2].expr.end()
			luaVAL.stmt = temp
		}
	case 17:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &GotoStmt{Name: nil}
			temp.Scope = luaDollar[1].token.Scope
			temp.Err = &SyntaxErr{Info: "缺少goto目标名称"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.stmt = temp
		}
	case 18:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &DoEndStmt{Block: luaDollar[2].stmts}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[3].token.End
			luaVAL.stmt = temp
		}
	case 19:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &DoEndStmt{Block: luaDollar[2].stmts}
			temp.Start = luaDollar[1].token.Start
			if len(luaDollar[2].stmts) > 0 {
				temp.End = luaDollar[2].stmts[len(luaDollar[2].stmts)-1].end()
			} else {
				temp.End = luaDollar[1].token.End
			}
			temp.Err = &SyntaxErr{Info: "缺少End"}
			temp.Err.Start = temp.End
			temp.Err.End = temp.End
			luaVAL.stmt = temp
		}
	case 20:
		luaDollar = luaS[luapt-5 : luapt+1]
		{
			temp := &WhileStmt{Condition: luaDollar[2].expr, Block: luaDollar[4].stmts}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[5].token.End
			luaVAL.stmt = temp
		}
	case 21:
		luaDollar = luaS[luapt-4 : luapt+1]
		{
			temp := &WhileStmt{Condition: luaDollar[2].expr, Block: luaDollar[4].stmts}
			temp.Start = luaDollar[1].token.Start
			if len(luaDollar[4].stmts) > 0 {
				temp.End = luaDollar[4].stmts[len(luaDollar[4].stmts)-1].end()
			} else {
				temp.End = luaDollar[3].token.End
			}
			temp.Err = &SyntaxErr{Info: "缺少end"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.stmt = temp
		}
	case 22:
		luaDollar = luaS[luapt-4 : luapt+1]
		{
			temp := &WhileStmt{Condition: nil, Block: luaDollar[3].stmts}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[4].token.End
			temp.Err = &SyntaxErr{Info: "缺少条件表达式"}
			temp.Err.Start = luaDollar[1].token.End
			temp.Err.End = luaDollar[2].token.Start
			luaVAL.stmt = temp
		}
	case 23:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &WhileStmt{Condition: luaDollar[2].expr, Block: nil}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[2].expr.end()
			temp.Err = &SyntaxErr{Info: "缺少语句do..end"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.stmt = temp
		}
	case 24:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &WhileStmt{Condition: nil, Block: nil}
			temp.Scope = luaDollar[1].token.Scope
			temp.Err = &SyntaxErr{Info: "缺少语句expr do..end"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.stmt = temp
		}
	case 25:
		luaDollar = luaS[luapt-4 : luapt+1]
		{
			temp := &RepeatStmt{Condition: luaDollar[4].expr, Block: luaDollar[2].stmts}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[4].expr.end()
			luaVAL.stmt = temp
		}
	case 26:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &RepeatStmt{Condition: nil, Block: luaDollar[2].stmts}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[3].token.End
			temp.Err = &SyntaxErr{Info: "缺少语句条件表达式"}
			temp.Err.Scope = luaDollar[3].token.Scope
			luaVAL.stmt = temp
		}
	case 27:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &RepeatStmt{Condition: nil, Block: luaDollar[2].stmts}
			temp.Start = luaDollar[1].token.Start
			if len(luaDollar[2].stmts) > 0 {
				temp.End = luaDollar[2].stmts[len(luaDollar[2].stmts)-1].end()
			} else {
				temp.End = luaDollar[1].token.End
			}
			temp.Err = &SyntaxErr{Info: "缺少条件以及Until"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.stmt = temp
		}
	case 28:
		luaDollar = luaS[luapt-6 : luapt+1]
		{
			luaVAL.stmt = &IfStmt{Condition: luaDollar[2].expr, Then: luaDollar[4].stmts}
			cur := luaVAL.stmt
			for _, elseif := range luaDollar[5].stmts {
				cur.(*IfStmt).Else = []Stmt{elseif}
				cur = elseif
			}
			luaVAL.stmt.(*IfStmt).Start = luaDollar[1].token.Start
			luaVAL.stmt.(*IfStmt).End = luaDollar[6].token.End
		}
	case 29:
		luaDollar = luaS[luapt-5 : luapt+1]
		{
			luaVAL.stmt = &IfStmt{Condition: luaDollar[2].expr, Then: luaDollar[4].stmts}
			cur := luaVAL.stmt
			for _, elseif := range luaDollar[5].stmts {
				cur.(*IfStmt).Else = []Stmt{elseif}
				cur = elseif
			}
			temp := luaVAL.stmt.(*IfStmt)
			temp.Start = luaDollar[1].token.Start
			if len(luaDollar[5].stmts) > 0 {
				temp.End = luaDollar[5].stmts[len(luaDollar[5].stmts)-1].end()
			} else if len(luaDollar[4].stmts) > 0 {
				temp.End = luaDollar[4].stmts[len(luaDollar[4].stmts)-1].end()
			} else {
				temp.End = luaDollar[3].token.End
			}
			temp.Err = &SyntaxErr{Info: "缺少end"}
			temp.Err.Scope = luaDollar[1].token.Scope
		}
	case 30:
		luaDollar = luaS[luapt-5 : luapt+1]
		{
			luaVAL.stmt = &IfStmt{Condition: nil, Then: luaDollar[3].stmts}
			cur := luaVAL.stmt
			for _, elseif := range luaDollar[4].stmts {
				cur.(*IfStmt).Else = []Stmt{elseif}
				cur = elseif
			}
			temp := luaVAL.stmt.(*IfStmt)
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[5].token.End
			temp.Err = &SyntaxErr{Info: "缺少条件表达式"}
			temp.Err.Start = luaDollar[1].token.End
			temp.Err.End = luaDollar[2].token.Start
		}
	case 31:
		luaDollar = luaS[luapt-4 : luapt+1]
		{
			luaVAL.stmt = &IfStmt{Condition: nil, Then: luaDollar[2].stmts}
			cur := luaVAL.stmt
			for _, elseif := range luaDollar[3].stmts {
				cur.(*IfStmt).Else = []Stmt{elseif}
				cur = elseif
			}
			temp := luaVAL.stmt.(*IfStmt)
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[4].token.End
			temp.Err = &SyntaxErr{Info: "缺少条件表达式及then"}
			temp.Err.Scope = luaDollar[1].token.Scope
		}
	case 32:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.stmt = &IfStmt{Condition: nil, Then: luaDollar[2].stmts}
			cur := luaVAL.stmt
			for _, elseif := range luaDollar[3].stmts {
				cur.(*IfStmt).Else = []Stmt{elseif}
				cur = elseif
			}
			temp := luaVAL.stmt.(*IfStmt)
			temp.Start = luaDollar[1].token.Start
			if len(luaDollar[3].stmts) > 0 {
				temp.End = luaDollar[3].stmts[len(luaDollar[3].stmts)-1].end()
			} else if len(luaDollar[2].stmts) > 0 {
				temp.End = luaDollar[2].stmts[len(luaDollar[2].stmts)-1].end()
			} else {
				temp.End = luaDollar[1].token.End
			}
			temp.Err = &SyntaxErr{Info: "缺少条件,then和end"}
			temp.Err.Scope = temp.Scope
		}
	case 33:
		luaDollar = luaS[luapt-8 : luapt+1]
		{
			luaVAL.stmt = &IfStmt{Condition: luaDollar[2].expr, Then: luaDollar[4].stmts}
			cur := luaVAL.stmt
			for _, elseif := range luaDollar[5].stmts {
				cur.(*IfStmt).Else = []Stmt{elseif}
				cur = elseif
			}
			cur.(*IfStmt).Else = luaDollar[7].stmts
			luaVAL.stmt.(*IfStmt).Start = luaDollar[1].token.Start
			luaVAL.stmt.(*IfStmt).End = luaDollar[8].token.End
		}
	case 34:
		luaDollar = luaS[luapt-7 : luapt+1]
		{
			luaVAL.stmt = &IfStmt{Condition: nil, Then: luaDollar[3].stmts}
			cur := luaVAL.stmt
			for _, elseif := range luaDollar[4].stmts {
				cur.(*IfStmt).Else = []Stmt{elseif}
				cur = elseif
			}
			cur.(*IfStmt).Else = luaDollar[6].stmts
			temp := luaVAL.stmt.(*IfStmt)
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[7].token.End
			temp.Err = &SyntaxErr{Info: "缺少条件表达式"}
			temp.Err.Scope = temp.Scope
		}
	case 35:
		luaDollar = luaS[luapt-7 : luapt+1]
		{
			luaVAL.stmt = &IfStmt{Condition: luaDollar[2].expr, Then: luaDollar[4].stmts}
			cur := luaVAL.stmt
			for _, elseif := range luaDollar[4].stmts {
				cur.(*IfStmt).Else = []Stmt{elseif}
				cur = elseif
			}
			cur.(*IfStmt).Else = luaDollar[7].stmts
			temp := luaVAL.stmt.(*IfStmt)
			temp.Start = luaDollar[1].token.Start
			if len(luaDollar[7].stmts) > 0 {
				temp.End = luaDollar[7].stmts[len(luaDollar[7].stmts)-1].end()
			} else {
				temp.End = luaDollar[6].token.End
			}
			temp.Err = &SyntaxErr{Info: "缺少end"}
			temp.Err.Start = temp.End
			temp.Err.End = temp.End
		}
	case 36:
		luaDollar = luaS[luapt-6 : luapt+1]
		{
			luaVAL.stmt = &IfStmt{Condition: nil, Then: luaDollar[2].stmts}
			cur := luaVAL.stmt
			for _, elseif := range luaDollar[3].stmts {
				cur.(*IfStmt).Else = []Stmt{elseif}
				cur = elseif
			}
			cur.(*IfStmt).Else = luaDollar[5].stmts
			temp := luaVAL.stmt.(*IfStmt)
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[6].token.End
			temp.Err = &SyntaxErr{Info: "缺少条件表达式及then"}
			temp.Err.Scope = luaDollar[1].token.Scope
		}
	case 37:
		luaDollar = luaS[luapt-9 : luapt+1]
		{
			luaVAL.stmt = &ForLoopNumStmt{Name: luaDollar[2].expr, Init: luaDollar[4].expr, Limit: luaDollar[6].expr, Block: luaDollar[8].stmts}
			luaVAL.stmt.(*ForLoopNumStmt).Start = luaDollar[1].token.Start
			luaVAL.stmt.(*ForLoopNumStmt).End = luaDollar[9].token.End
		}
	case 38:
		luaDollar = luaS[luapt-8 : luapt+1]
		{
			temp := &ForLoopNumStmt{Name: luaDollar[2].expr, Init: luaDollar[4].expr, Limit: luaDollar[6].expr, Block: luaDollar[8].stmts}
			temp.Start = luaDollar[1].token.Start
			if len(luaDollar[8].stmts) > 0 {
				temp.End = luaDollar[8].stmts[len(luaDollar[8].stmts)-1].end()
			} else {
				temp.End = luaDollar[7].token.End
			}
			temp.Err = &SyntaxErr{Info: "缺少end"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.stmt = temp
		}
	case 39:
		luaDollar = luaS[luapt-8 : luapt+1]
		{
			temp := &ForLoopNumStmt{Name: nil, Init: luaDollar[3].expr, Limit: luaDollar[5].expr, Block: luaDollar[7].stmts}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[8].token.End
			temp.Err = &SyntaxErr{Info: "缺少名称"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.stmt = temp
		}
	case 40:
		luaDollar = luaS[luapt-4 : luapt+1]
		{
			temp := &ForLoopNumStmt{Name: nil, Init: nil, Limit: nil, Block: luaDollar[3].stmts}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[4].token.End
			temp.Err = &SyntaxErr{Info: "缺少循环条件"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.stmt = temp
		}
	case 41:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &ForLoopNumStmt{Name: nil, Init: nil, Limit: nil, Block: luaDollar[3].stmts}
			temp.Start = luaDollar[1].token.Start
			if len(luaDollar[3].stmts) > 0 {
				temp.End = luaDollar[3].stmts[len(luaDollar[3].stmts)-1].end()
			} else {
				temp.End = luaDollar[2].token.End
			}
			temp.Err = &SyntaxErr{Info: "缺少循环条件及end"}
			temp.Err.Scope = temp.Scope
			luaVAL.stmt = temp
		}
	case 42:
		luaDollar = luaS[luapt-5 : luapt+1]
		{
			temp := &ForLoopNumStmt{Name: luaDollar[2].expr, Init: nil, Limit: nil, Block: luaDollar[4].stmts}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[5].token.End
			temp.Err = &SyntaxErr{Info: "缺少循环范围"}
			temp.Err.Scope = luaDollar[2].expr.scope()
			luaVAL.stmt = temp
		}
	case 43:
		luaDollar = luaS[luapt-6 : luapt+1]
		{
			temp := &ForLoopNumStmt{Name: luaDollar[2].expr, Init: nil, Limit: nil, Block: luaDollar[5].stmts}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[6].token.End
			temp.Err = &SyntaxErr{Info: "缺少循环范围"}
			temp.Err.Scope = luaDollar[2].expr.scope()
			luaVAL.stmt = temp
		}
	case 44:
		luaDollar = luaS[luapt-7 : luapt+1]
		{
			temp := &ForLoopNumStmt{Name: luaDollar[2].expr, Init: luaDollar[4].expr, Limit: nil, Block: luaDollar[6].stmts}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[7].token.End
			temp.Err = &SyntaxErr{Info: "缺少循环终点"}
			temp.Err.Scope = luaDollar[4].expr.scope()
			luaVAL.stmt = temp
		}
	case 45:
		luaDollar = luaS[luapt-8 : luapt+1]
		{
			temp := &ForLoopNumStmt{Name: luaDollar[2].expr, Init: luaDollar[4].expr, Limit: nil, Block: luaDollar[7].stmts}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[8].token.End
			temp.Err = &SyntaxErr{Info: "缺少循环终点"}
			temp.Err.Scope = luaDollar[5].token.Scope
			luaVAL.stmt = temp
		}
	case 46:
		luaDollar = luaS[luapt-11 : luapt+1]
		{
			temp := &ForLoopNumStmt{Name: luaDollar[2].expr, Init: luaDollar[4].expr, Limit: luaDollar[6].expr, Step: luaDollar[8].expr, Block: luaDollar[10].stmts}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[11].token.End
			luaVAL.stmt = temp
		}
	case 47:
		luaDollar = luaS[luapt-10 : luapt+1]
		{
			temp := &ForLoopNumStmt{Name: luaDollar[2].expr, Init: luaDollar[4].expr, Limit: luaDollar[6].expr, Step: nil, Block: luaDollar[9].stmts}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[10].token.End
			temp.Err = &SyntaxErr{Info: "缺少步进值"}
			temp.Err.Start = luaDollar[7].token.End
			temp.Err.End = luaDollar[8].token.Start
			luaVAL.stmt = temp
		}
	case 48:
		luaDollar = luaS[luapt-10 : luapt+1]
		{
			temp := &ForLoopNumStmt{Name: luaDollar[2].expr, Init: luaDollar[4].expr, Limit: luaDollar[6].expr, Step: luaDollar[8].expr, Block: luaDollar[10].stmts}
			temp.Start = luaDollar[1].token.Start
			if len(luaDollar[10].stmts) > 0 {
				temp.End = luaDollar[10].stmts[len(luaDollar[10].stmts)-1].end()
			} else {
				temp.End = luaDollar[9].token.End
			}
			temp.Err = &SyntaxErr{Info: "缺少end"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.stmt = temp
		}
	case 49:
		luaDollar = luaS[luapt-7 : luapt+1]
		{
			luaVAL.stmt = &ForLoopListStmt{Names: luaDollar[2].exprs, Exprs: luaDollar[4].exprs, Block: luaDollar[6].stmts}
			luaVAL.stmt.(*ForLoopListStmt).Start = luaDollar[1].token.Start
			luaVAL.stmt.(*ForLoopListStmt).End = luaDollar[7].token.End
		}
	case 50:
		luaDollar = luaS[luapt-6 : luapt+1]
		{
			temp := &ForLoopListStmt{Exprs: luaDollar[3].exprs, Block: luaDollar[5].stmts}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[6].token.End
			temp.Err = &SyntaxErr{Info: "缺少迭代表达式"}
			temp.Err.Scope = luaDollar[2].token.Scope
			luaVAL.stmt = temp
		}
	case 51:
		luaDollar = luaS[luapt-6 : luapt+1]
		{
			temp := &ForLoopListStmt{Names: luaDollar[2].exprs, Block: luaDollar[5].stmts}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[6].token.End
			temp.Err = &SyntaxErr{Info: "缺少迭代对象表达式"}
			if len(luaDollar[2].exprs) > 0 {
				temp.Err.Scope = luaDollar[2].exprs[len(luaDollar[2].exprs)-1].scope()
			}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.stmt = temp
		}
	case 52:
		luaDollar = luaS[luapt-6 : luapt+1]
		{
			temp := &ForLoopListStmt{Names: luaDollar[2].exprs, Exprs: luaDollar[4].exprs, Block: luaDollar[6].stmts}
			temp.Start = luaDollar[1].token.Start
			if len(luaDollar[6].stmts) > 0 {
				temp.End = luaDollar[6].stmts[len(luaDollar[6].stmts)-1].end()
			} else {
				temp.End = luaDollar[5].token.End
			}
			temp.Err = &SyntaxErr{Info: "缺少end"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.stmt = temp
		}
	case 53:
		luaDollar = luaS[luapt-4 : luapt+1]
		{

			temp := &ForLoopListStmt{Names: luaDollar[2].exprs, Exprs: luaDollar[4].exprs}
			temp.Start = luaDollar[1].token.Start
			if len(luaDollar[4].exprs) > 0 {
				temp.End = luaDollar[4].exprs[len(luaDollar[4].exprs)-1].end()
			} else {
				temp.End = luaDollar[3].token.End
			}
			temp.Err = &SyntaxErr{Info: "缺少执行语句end"}
			temp.Err.Scope = luaDollar[1].token.Scope
		}
	case 54:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := luaDollar[2].stmt.(*FuncDefStmt)
			temp.Function = luaDollar[3].expr
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[3].expr.end()
			luaVAL.stmt = temp
		}
	case 55:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := luaDollar[2].stmt.(*FuncDefStmt)
			temp.Start = luaDollar[1].token.Start
			temp.Err = &SyntaxErr{Info: "缺少函数体"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.stmt = temp
		}
	case 56:
		luaDollar = luaS[luapt-4 : luapt+1]
		{
			temp := &LocalFuncDefStmt{Name: luaDollar[3].expr, Function: luaDollar[4].expr}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[4].expr.end()
			luaVAL.stmt = temp
		}
	case 57:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &LocalFuncDefStmt{Function: luaDollar[3].expr}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[3].expr.end()
			temp.Err = &SyntaxErr{Info: "缺少函数名"}
			temp.Err.Scope = luaDollar[2].token.Scope
			luaVAL.stmt = temp
		}
	case 58:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &LocalFuncDefStmt{Name: luaDollar[2].expr, Function: luaDollar[3].expr}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[3].expr.end()
			temp.Err = &SyntaxErr{Info: "缺少function"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.stmt = temp
		}
	case 59:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &LocalFuncDefStmt{Name: luaDollar[3].expr}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[3].expr.end()
			temp.Err = &SyntaxErr{Info: "缺少函数体"}
			temp.Err.Scope = luaDollar[3].expr.scope()
			luaVAL.stmt = temp
		}
	case 60:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &LocalFuncDefStmt{}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[2].token.End
			temp.Err = &SyntaxErr{Info: "缺少函数内容"}
			temp.Err.Scope = luaDollar[2].token.Scope
			luaVAL.stmt = temp
		}
	case 61:
		luaDollar = luaS[luapt-4 : luapt+1]
		{
			temp := &LocalVarDef{Names: luaDollar[2].exprs, Inits: luaDollar[4].exprs}
			temp.Start = luaDollar[1].token.Start
			if len(luaDollar[4].exprs) > 0 {
				temp.End = luaDollar[4].exprs[len(luaDollar[4].exprs)-1].end()
			} else {
				temp.End = luaDollar[3].token.End
			}

			luaVAL.stmt = temp
		}
	case 62:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &LocalVarDef{Names: luaDollar[2].exprs}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[3].token.End
			temp.Err = &SyntaxErr{Info: "缺少初始值"}
			temp.Err.Scope = luaDollar[3].token.Scope
			luaVAL.stmt = temp
		}
	case 63:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &LocalVarDef{Inits: luaDollar[3].exprs}
			temp.Start = luaDollar[1].token.Start
			if len(luaDollar[3].exprs) > 0 {
				temp.End = luaDollar[3].exprs[len(luaDollar[3].exprs)-1].end()
			} else {
				temp.End = luaDollar[2].token.End
			}
			temp.Err = &SyntaxErr{Info: "缺少变量名称"}
			temp.Err.Scope = luaDollar[2].token.Scope
			luaVAL.stmt = temp
		}
	case 64:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &LocalVarDef{Names: luaDollar[2].exprs}
			temp.Start = luaDollar[1].token.Start
			if len(luaDollar[2].exprs) > 0 {
				temp.End = luaDollar[2].exprs[len(luaDollar[2].exprs)-1].end()
			} else {
				temp.End = luaDollar[1].token.End
			}
			luaVAL.stmt = temp
		}
	case 65:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &LocalVarDef{}
			temp.Scope = luaDollar[1].token.Scope
			temp.Err = &SyntaxErr{Info: "缺少变量名称"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.stmt = temp
		}
	case 66:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &ErrorStmt{Info: "解析错误"}
			tk := lualex.(*Lexer).Token
			temp.Err = &SyntaxErr{Info: tk.Str + "附近解析错误"}
			temp.Err.Scope = tk.Scope
			luaVAL.stmt = temp
		}
	case 67:
		luaDollar = luaS[luapt-0 : luapt+1]
		{
			luaVAL.stmts = []Stmt{}
		}
	case 68:
		luaDollar = luaS[luapt-5 : luapt+1]
		{
			ifstmt := &IfStmt{Condition: luaDollar[3].expr, Then: luaDollar[5].stmts}
			ifstmt.Start = luaDollar[2].token.Start
			if len(luaDollar[5].stmts) > 0 {
				ifstmt.End = luaDollar[5].stmts[len(luaDollar[5].stmts)-1].end()
			} else {
				ifstmt.End = luaDollar[4].token.End
			}

			luaVAL.stmts = append(luaDollar[1].stmts, ifstmt)
		}
	case 69:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.stmt = &ReturnStmt{Exprs: nil}
			luaVAL.stmt.(*ReturnStmt).Scope = luaDollar[1].token.Scope
		}
	case 70:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.stmt = &ReturnStmt{Exprs: luaDollar[2].exprs}
			luaVAL.stmt.(*ReturnStmt).Start = luaDollar[1].token.Start
			if len(luaDollar[2].exprs) > 0 {
				luaVAL.stmt.(*ReturnStmt).End = luaDollar[2].exprs[len(luaDollar[2].exprs)-1].end()
			} else {
				luaVAL.stmt.(*ReturnStmt).End = luaDollar[1].token.End
			}
		}
	case 71:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.stmt = &ReturnStmt{Exprs: luaDollar[2].exprs}
			luaVAL.stmt.(*ReturnStmt).Start = luaDollar[1].token.Start
			luaVAL.stmt.(*ReturnStmt).End = luaDollar[3].token.End
		}
	case 72:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &LabelStmt{Name: luaDollar[2].expr}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[3].token.End
			luaVAL.stmt = temp
		}
	case 73:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &LabelStmt{Name: luaDollar[1].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[2].token.End
			temp.Err = &SyntaxErr{Info: "标签缺少左侧符号"}
			temp.Err.Scope = luaDollar[1].expr.scope()
			luaVAL.stmt = temp
		}
	case 74:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &LabelStmt{Name: luaDollar[2].expr}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[2].expr.end()
			temp.Err = &SyntaxErr{Info: "标签缺少右侧符号"}
			temp.Err.Scope = luaDollar[2].expr.scope()
			luaVAL.stmt = temp
		}
	case 75:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &LabelStmt{Name: nil}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[2].token.End
			temp.Err = &SyntaxErr{Info: "标签缺少名称"}
			temp.Err.Scope = temp.Scope
			luaVAL.stmt = temp
		}
	case 76:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &LabelStmt{Name: nil}
			temp.Scope = luaDollar[1].token.Scope
			temp.Err = &SyntaxErr{Info: "标签不完整"}
			temp.Err.Scope = temp.Scope
			luaVAL.stmt = temp
		}
	case 77:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &FuncDefStmt{Name: luaDollar[1].expr, Receiver: nil}
			temp.Scope = luaDollar[1].expr.scope()
			luaVAL.stmt = temp
		}
	case 78:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &FuncDefStmt{Name: luaDollar[3].expr, Receiver: luaDollar[1].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.stmt = temp

		}
	case 79:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &FuncDefStmt{Receiver: luaDollar[1].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[2].token.End
			temp.Err = &SyntaxErr{Info: "缺少名称"}
			temp.Err.Scope = luaDollar[2].token.Scope
			luaVAL.stmt = temp
		}
	case 80:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &FuncDefStmt{Name: luaDollar[2].expr}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[2].expr.end()
			luaVAL.stmt = temp

		}
	case 81:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = luaDollar[1].expr
		}
	case 82:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &GetItemExpr{Table: luaDollar[1].expr, Key: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 83:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &GetItemExpr{Table: luaDollar[1].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[2].token.End
			temp.Err = &SyntaxErr{Info: "缺少子项目"}
			temp.Err.Scope = luaDollar[2].token.Scope
			luaVAL.expr = temp
		}
	case 84:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &GetItemExpr{Key: luaDollar[2].expr}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[2].expr.end()
			temp.Err = &SyntaxErr{Info: "缺少父级项目"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.expr = temp
		}
	case 85:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.exprs = []Expr{luaDollar[1].expr}
		}
	case 86:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.exprs = append(luaDollar[1].exprs, luaDollar[3].expr)
		}
	case 87:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.exprs = luaDollar[1].exprs ////////////////////////////////////////////errrrrrrrrrrrrrrrrr
		}
	case 88:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = luaDollar[1].expr
		}
	case 89:
		luaDollar = luaS[luapt-4 : luapt+1]
		{
			temp := &GetItemExpr{Table: luaDollar[1].expr, Key: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[4].token.End
			luaVAL.expr = temp
		}
	case 90:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &GetItemExpr{Table: luaDollar[1].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].token.End
			temp.Err = &SyntaxErr{Info: "缺少索引"}
			temp.Err.Scope = luaDollar[2].token.Scope
			luaVAL.expr = temp
		}
	case 91:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &GetItemExpr{Table: luaDollar[1].expr, Key: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			temp.Err = &SyntaxErr{Info: "缺少右括号"}
			temp.Err.Scope = luaDollar[3].expr.scope()
			luaVAL.expr = temp
		}
	case 92:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &GetItemExpr{Table: luaDollar[1].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[2].token.End
			temp.Err = &SyntaxErr{Info: "缺少索引"}
			temp.Err.Scope = luaDollar[2].token.Scope
			luaVAL.expr = temp
		}
	case 93:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			name := &NameExpr{Value: luaDollar[3].token.Str}
			name.Scope = luaDollar[3].token.Scope
			temp := &GetItemExpr{Table: luaDollar[1].expr, Key: name}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].token.End
			luaVAL.expr = temp
		}
	case 94:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &GetItemExpr{Table: luaDollar[1].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[2].token.End
			temp.Err = &SyntaxErr{Info: "缺少子项目"}
			temp.Err.Scope = luaDollar[2].token.Scope
			luaVAL.expr = temp
		}
	case 95:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &NameExpr{Value: luaDollar[1].token.Str}
			temp.Scope = luaDollar[1].token.Scope
			luaVAL.expr = temp
		}
	case 96:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			class := &ATypeExpr{Value: luaDollar[2].token.Str}
			class.Scope = luaDollar[2].token.Scope
			temp := &NameExpr{Value: luaDollar[1].token.Str, Type: class}
			temp.Scope = luaDollar[1].token.Scope
			luaVAL.expr = temp
		}
	case 97:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			class := &STypeExpr{Value: luaDollar[2].token.Str}
			class.Scope = luaDollar[2].token.Scope
			temp := &NameExpr{Value: luaDollar[1].token.Str, Type: class}
			temp.Scope = luaDollar[1].token.Scope
			luaVAL.expr = temp
		}
	case 98:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.exprs = []Expr{luaDollar[1].expr}
		}
	case 99:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.exprs = append(luaDollar[1].exprs, luaDollar[3].expr)
		}
	case 100:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.exprs = luaDollar[1].exprs ///////////////////////////////////////////////////errrrrrrrrrrrr
		}
	case 101:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.exprs = []Expr{luaDollar[1].expr}
		}
	case 102:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.exprs = append(luaDollar[1].exprs, luaDollar[3].expr)
		}
	case 103:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.exprs = luaDollar[1].exprs ////////////////////////////////////////////////////errrrrrrrrrrrrrrr
		}
	case 104:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &NilExpr{}
			temp.Scope = luaDollar[1].token.Scope
			luaVAL.expr = temp
		}
	case 105:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &FalseExpr{}
			temp.Scope = luaDollar[1].token.Scope
			luaVAL.expr = temp
		}
	case 106:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &TrueExpr{}
			temp.Scope = luaDollar[1].token.Scope
			luaVAL.expr = temp
		}
	case 107:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &NumberExpr{Value: luaDollar[1].token.Str}
			temp.Scope = luaDollar[1].token.Scope
			luaVAL.expr = temp
		}
	case 108:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &StringExpr{Value: luaDollar[1].token.Str}
			temp.Scope = luaDollar[1].token.Scope
			luaVAL.expr = temp
		}
	case 109:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &AnyExpr{}
			temp.Scope = luaDollar[1].token.Scope
			luaVAL.expr = temp
		}
	case 110:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = luaDollar[1].expr
		}
	case 111:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = luaDollar[1].expr
		}
	case 112:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = luaDollar[1].expr
		}
	case 113:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 114:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 115:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 116:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 117:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 118:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 119:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 120:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 121:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 122:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 123:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 124:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 125:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 126:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 127:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 128:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 129:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 130:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 131:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 132:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 133:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 134:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &OneOpExpr{Operator: luaDollar[1].token.Str, Target: luaDollar[2].expr}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[2].expr.end()
			luaVAL.expr = temp
		}
	case 135:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &OneOpExpr{Operator: luaDollar[1].token.Str, Target: luaDollar[2].expr}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[2].expr.end()
			luaVAL.expr = temp
		}
	case 136:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &OneOpExpr{Operator: luaDollar[1].token.Str, Target: luaDollar[2].expr}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[2].expr.end()
			luaVAL.expr = temp
		}
	case 137:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &OneOpExpr{Operator: luaDollar[1].token.Str, Target: luaDollar[2].expr}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[2].expr.end()
			luaVAL.expr = temp
		}
	case 138:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = luaDollar[2].expr
		}
	case 139:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = luaDollar[1].expr
		}
	case 140:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			if funstmt, ok := luaDollar[1].node.(*FuncCall); !ok {
				lualex.(*Lexer).Error("parse error")
			} else {
				luaVAL.expr = funstmt
			}
		}
	case 141:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &FuncCall{Function: luaDollar[1].expr, Args: luaDollar[2].exprs}
			temp.Start = luaDollar[1].expr.start()
			if len(luaDollar[2].exprs) > 0 {
				temp.End = luaDollar[2].exprs[len(luaDollar[2].exprs)-1].end()
			} else {
				temp.End = luaDollar[1].expr.end()
			}
			luaVAL.node = temp
		}
	case 142:
		luaDollar = luaS[luapt-4 : luapt+1]
		{
			temp := &FuncCall{Function: luaDollar[3].expr, Receiver: luaDollar[1].expr, Args: luaDollar[4].exprs}
			temp.Start = luaDollar[1].expr.start()
			if len(luaDollar[4].exprs) > 0 {
				temp.End = luaDollar[4].exprs[len(luaDollar[4].exprs)-1].end()
			} else {
				temp.End = luaDollar[3].expr.end()
			}
			luaVAL.node = temp
		}
	case 143:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &FuncCall{Function: luaDollar[3].expr, Receiver: luaDollar[1].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			temp.Err = &SyntaxErr{Info: "缺少函数调用参数(args)"}
			temp.Err.Scope = luaDollar[2].token.Scope
			luaVAL.node = temp
		}
	case 144:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &FuncCall{Receiver: luaDollar[1].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[2].token.End
			temp.Err = &SyntaxErr{Info: "缺少函数调用"}
			temp.Err.Scope = luaDollar[2].token.Scope
			luaVAL.node = temp
		}
	case 145:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.exprs = []Expr{}
		}
	case 146:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.exprs = []Expr{} /////////////////////////////errrrrrrrrrrr
		}
	case 147:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.exprs = luaDollar[2].exprs
		}
	case 148:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.exprs = luaDollar[2].exprs //////////////////////////////////errrrrrrrrrrrrrrrr
		}
	case 149:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.exprs = []Expr{luaDollar[1].expr}
		}
	case 150:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			str := &StringExpr{Value: luaDollar[1].token.Str}
			str.Scope = luaDollar[1].token.Scope
			luaVAL.exprs = []Expr{str}
		}
	case 151:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.expr = luaDollar[2].expr
		}
	case 152:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &FuncDefExpr{}
			temp.Scope = luaDollar[1].token.Scope
			temp.Err = &SyntaxErr{Info: "未定义函数体"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.expr = temp
		}
	case 153:
		luaDollar = luaS[luapt-6 : luapt+1]
		{
			class := &STypeExpr{Value: luaDollar[4].token.Str}
			class.Scope = luaDollar[4].token.Scope
			temp := &FuncDefExpr{Param: luaDollar[2].expr, Block: luaDollar[5].stmts, Result: class}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[6].token.End
			luaVAL.expr = temp
		}
	case 154:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &FuncDefExpr{Param: luaDollar[2].expr}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[2].expr.end()
			temp.Err = &SyntaxErr{Info: "缺少右括号及函数体"}
			temp.Err.Scope = temp.Scope
			luaVAL.expr = temp
		}
	case 155:
		luaDollar = luaS[luapt-5 : luapt+1]
		{
			class := &STypeExpr{Value: luaDollar[3].token.Str}
			class.Scope = luaDollar[3].token.Scope
			temp := &FuncDefExpr{Param: nil, Block: luaDollar[4].stmts, Result: class}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[5].token.End
			luaVAL.expr = temp
		}
	case 156:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &ParamExpr{IsAny: true}
			temp.Scope = luaDollar[1].token.Scope
			luaVAL.expr = temp
		}
	case 157:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &ParamExpr{Params: luaDollar[1].exprs, IsAny: false}
			temp.Scope = luaDollar[1].exprs[len(luaDollar[1].exprs)-1].scope()
			luaVAL.expr = temp
		}
	case 158:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &ParamExpr{Params: luaDollar[1].exprs, IsAny: true}
			if len(luaDollar[1].exprs) > 0 {
				temp.Start = luaDollar[1].exprs[len(luaDollar[1].exprs)-1].start()
			} else {
				temp.Start = luaDollar[2].token.Start
			}

			temp.End = luaDollar[3].token.End
			luaVAL.expr = temp
		}
	case 159:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &TableExpr{Fields: []Expr{}}
			temp.Scope = luaDollar[1].token.Scope
			luaVAL.expr = temp
		}
	case 160:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &TableExpr{Fields: []Expr{}}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[1].token.End
			temp.Err = &SyntaxErr{Info: "缺少右括号"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.expr = temp
		}
	case 161:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &TableExpr{Fields: luaDollar[2].exprs}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[3].token.End
			luaVAL.expr = temp
		}
	case 162:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &TableExpr{Fields: luaDollar[2].exprs}
			temp.Start = luaDollar[1].token.Start
			if len(luaDollar[2].exprs) > 0 {
				temp.End = luaDollar[2].exprs[len(luaDollar[2].exprs)-1].end()
			} else {
				temp.End = luaDollar[1].token.End
			}
			temp.Err = &SyntaxErr{Info: "缺少右括号"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.expr = temp
		}
	case 163:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.exprs = []Expr{luaDollar[1].expr}
		}
	case 164:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.exprs = append(luaDollar[1].exprs, luaDollar[3].expr)
		}
	case 165:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.exprs = luaDollar[1].exprs
		}
	case 166:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &FieldExpr{Key: luaDollar[1].expr, Value: luaDollar[3].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[3].expr.end()
			luaVAL.expr = temp
		}
	case 167:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &FieldExpr{Key: luaDollar[1].expr}
			temp.Start = luaDollar[1].expr.start()
			temp.End = luaDollar[2].token.End
			temp.Err = &SyntaxErr{Info: "缺少右值"}
			temp.Err.Scope = luaDollar[2].token.Scope
			luaVAL.expr = temp
		}
	case 168:
		luaDollar = luaS[luapt-5 : luapt+1]
		{
			temp := &FieldExpr{Key: luaDollar[2].expr, Value: luaDollar[5].expr}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[5].expr.end()
			luaVAL.expr = temp
		}
	case 169:
		luaDollar = luaS[luapt-4 : luapt+1]
		{
			temp := &FieldExpr{Key: luaDollar[2].expr}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[4].token.End
			temp.Err = &SyntaxErr{Info: "缺少右值"}
			temp.Err.Scope = luaDollar[3].token.Scope
			luaVAL.expr = temp
		}
	case 170:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			temp := &FieldExpr{Key: luaDollar[2].expr}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[3].token.End
			temp.Err = &SyntaxErr{Info: "缺少等号及右值"}
			temp.Err.Scope = luaDollar[3].token.Scope
			luaVAL.expr = temp
		}
	case 171:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &FieldExpr{}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[2].token.End
			temp.Err = &SyntaxErr{Info: "缺少索引表达式"}
			temp.Err.Scope = temp.Scope
			luaVAL.expr = temp
		}
	case 172:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &FieldExpr{}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[1].token.End
			temp.Err = &SyntaxErr{Info: "缺少右括号"}
			temp.Err.Scope = temp.Scope
			luaVAL.expr = temp
		}
	case 173:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			temp := &FieldExpr{Key: luaDollar[2].expr}
			temp.Start = luaDollar[1].token.Start
			temp.End = luaDollar[2].expr.end()
			temp.Err = &SyntaxErr{Info: "缺少右括号"}
			temp.Err.Scope = luaDollar[1].token.Scope
			luaVAL.expr = temp
		}
	case 174:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			temp := &FieldExpr{Value: luaDollar[1].expr}
			temp.Scope = luaDollar[1].expr.scope()
			luaVAL.expr = temp
		}
	case 175:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = &NameExpr{Value: luaDollar[1].token.Str}
		}
	case 176:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = &NameExpr{Value: luaDollar[1].token.Str}
		}
	}
	goto luastack /* stack new state and value */
}
