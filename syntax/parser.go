// Code generated by goyacc -o parser.go -l -p lua lua.y. DO NOT EDIT.
package syntax

import __yyfmt__ "fmt"

type luaSymType struct {
	yys   int
	token Token

	stmts []Stmt
	stmt  Stmt

	exprs []Expr
	expr  Expr

	node Node
}

const TAnd = 57346
const TBreak = 57347
const TDo = 57348
const TElse = 57349
const TElseIf = 57350
const TEnd = 57351
const TFalse = 57352
const TFor = 57353
const TFunction = 57354
const TGoto = 57355
const TIf = 57356
const TIn = 57357
const TLocal = 57358
const TNil = 57359
const TNot = 57360
const TOr = 57361
const TRepeat = 57362
const TReturn = 57363
const TThen = 57364
const TTrue = 57365
const TUntil = 57366
const TWhile = 57367
const TName = 57368
const TEqual = 57369
const TNequal = 57370
const TLequal = 57371
const TBequal = 57372
const TLmove = 57373
const TRmove = 57374
const TWdiv = 57375
const TTarget = 57376
const TConn = 57377
const TAny = 57378
const TString = 57379
const TNumber = 57380
const UNARY = 57381

var luaToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TAnd",
	"TBreak",
	"TDo",
	"TElse",
	"TElseIf",
	"TEnd",
	"TFalse",
	"TFor",
	"TFunction",
	"TGoto",
	"TIf",
	"TIn",
	"TLocal",
	"TNil",
	"TNot",
	"TOr",
	"TRepeat",
	"TReturn",
	"TThen",
	"TTrue",
	"TUntil",
	"TWhile",
	"TName",
	"TEqual",
	"TNequal",
	"TLequal",
	"TBequal",
	"TLmove",
	"TRmove",
	"TWdiv",
	"TTarget",
	"TConn",
	"TAny",
	"TString",
	"TNumber",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"'#'",
	"'&'",
	"'~'",
	"'|'",
	"'<'",
	"'>'",
	"'='",
	"'('",
	"')'",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"';'",
	"':'",
	"','",
	"'.'",
	"UNARY",
}

var luaStatenames = [...]string{}

const luaEofCode = 1
const luaErrCode = 2
const luaInitialStackSize = 16

var luaExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 9,
	37, 80,
	54, 80,
	56, 80,
	59, 80,
	61, 80,
	-2, 10,
	-1, 20,
	51, 36,
	60, 36,
	-2, 79,
	-1, 106,
	51, 37,
	60, 37,
	-2, 79,
}

const luaPrivate = 57344

const luaLast = 824

var luaAct = [...]int{
	28, 101, 36, 21, 63, 97, 21, 37, 54, 152,
	180, 115, 155, 116, 154, 50, 21, 52, 21, 71,
	170, 118, 43, 20, 173, 69, 20, 71, 59, 66,
	113, 70, 171, 71, 46, 184, 20, 98, 20, 93,
	94, 95, 96, 47, 66, 156, 104, 111, 67, 27,
	21, 77, 44, 9, 112, 2, 9, 163, 124, 165,
	164, 114, 119, 65, 71, 45, 9, 183, 9, 49,
	106, 51, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 23, 58, 105, 163, 60, 113,
	121, 120, 117, 68, 157, 57, 53, 151, 150, 60,
	159, 21, 161, 21, 30, 123, 42, 48, 109, 205,
	24, 29, 39, 166, 202, 149, 169, 31, 76, 66,
	102, 20, 197, 20, 196, 190, 74, 75, 78, 77,
	34, 33, 32, 182, 38, 186, 187, 185, 153, 40,
	177, 41, 21, 107, 104, 174, 24, 175, 45, 99,
	103, 9, 162, 9, 158, 4, 160, 5, 167, 25,
	100, 26, 20, 148, 21, 35, 67, 56, 55, 178,
	188, 10, 8, 21, 3, 191, 1, 0, 193, 21,
	0, 65, 0, 45, 20, 61, 200, 21, 64, 0,
	62, 21, 9, 20, 0, 172, 21, 0, 0, 20,
	0, 0, 0, 0, 0, 0, 0, 20, 0, 0,
	0, 20, 0, 0, 9, 0, 20, 181, 0, 0,
	0, 0, 0, 9, 0, 0, 189, 0, 91, 9,
	194, 0, 192, 0, 0, 0, 0, 9, 0, 0,
	199, 9, 0, 92, 201, 0, 9, 0, 0, 204,
	0, 89, 90, 86, 88, 83, 82, 76, 0, 84,
	0, 0, 91, 72, 73, 74, 75, 78, 77, 0,
	79, 80, 81, 85, 87, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 195, 89, 90, 86, 88, 83,
	82, 76, 0, 84, 0, 0, 91, 72, 73, 74,
	75, 78, 77, 0, 79, 80, 81, 85, 87, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 179, 89,
	90, 86, 88, 83, 82, 76, 0, 84, 91, 0,
	0, 72, 73, 74, 75, 78, 77, 0, 79, 80,
	81, 85, 87, 92, 0, 0, 0, 0, 0, 176,
	0, 89, 90, 86, 88, 83, 82, 76, 0, 84,
	91, 0, 0, 72, 73, 74, 75, 78, 77, 0,
	79, 80, 81, 85, 87, 92, 0, 0, 0, 0,
	0, 168, 0, 89, 90, 86, 88, 83, 82, 76,
	0, 84, 0, 0, 0, 72, 73, 74, 75, 78,
	77, 0, 79, 80, 81, 85, 87, 11, 13, 125,
	0, 0, 0, 17, 18, 12, 16, 0, 19, 0,
	0, 0, 15, 6, 76, 0, 84, 14, 23, 0,
	72, 73, 74, 75, 78, 77, 22, 0, 91, 0,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 24, 0, 0, 0, 0, 0,
	7, 89, 90, 86, 88, 83, 82, 76, 0, 84,
	91, 0, 0, 72, 73, 74, 75, 78, 77, 0,
	79, 80, 81, 85, 87, 92, 0, 0, 198, 0,
	0, 0, 0, 89, 90, 86, 88, 83, 82, 76,
	0, 84, 91, 0, 0, 72, 73, 74, 75, 78,
	77, 0, 79, 80, 81, 85, 87, 92, 0, 0,
	110, 0, 0, 0, 0, 89, 90, 86, 88, 83,
	82, 76, 0, 84, 91, 0, 108, 72, 73, 74,
	75, 78, 77, 0, 79, 80, 81, 85, 87, 92,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 86,
	88, 83, 82, 76, 0, 84, 91, 0, 0, 72,
	73, 74, 75, 78, 77, 0, 79, 80, 81, 85,
	87, 92, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 86, 88, 83, 82, 76, 0, 84, 0, 0,
	0, 72, 73, 74, 75, 78, 77, 0, 79, 80,
	81, 85, 87, 30, 0, 42, 0, 0, 0, 0,
	29, 39, 0, 83, 82, 76, 31, 84, 0, 102,
	0, 72, 73, 74, 75, 78, 77, 91, 79, 34,
	33, 32, 0, 38, 0, 0, 0, 0, 40, 0,
	41, 0, 0, 0, 0, 24, 0, 45, 0, 103,
	89, 90, 86, 88, 83, 82, 76, 0, 84, 0,
	0, 0, 72, 73, 74, 75, 78, 77, 0, 79,
	80, 81, 85, 87, 89, 90, 86, 88, 83, 82,
	76, 0, 84, 0, 0, 0, 72, 73, 74, 75,
	78, 77, 0, 79, 80, 81, 85, 87, 30, 0,
	42, 0, 0, 0, 0, 29, 39, 0, 83, 82,
	76, 31, 84, 0, 23, 0, 72, 73, 74, 75,
	78, 77, 0, 0, 34, 33, 32, 0, 38, 0,
	30, 0, 42, 40, 0, 41, 0, 29, 39, 0,
	24, 122, 45, 31, 0, 0, 23, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 34, 33, 32, 0,
	38, 0, 0, 0, 0, 40, 0, 41, 0, 83,
	82, 76, 24, 84, 45, 0, 0, 72, 73, 74,
	75, 78, 77, 0, 79, 80, 81, 83, 82, 76,
	0, 84, 0, 0, 0, 72, 73, 74, 75, 78,
	77, 0, 79, 80,
}

var luaPact = [...]int{
	412, -1000, -1000, 412, -1000, -1000, 740, -1000, -17, -1000,
	-1000, -1000, 91, 412, 740, 412, 740, 80, 79, 83,
	-1000, 139, 77, -1000, 740, -1000, -1000, -27, 572, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 139, -1000, 740, 740,
	740, 740, -15, -1000, -1000, 104, 740, 68, -1000, 144,
	540, 94, 508, -4, 39, -15, -48, -1000, 76, -30,
	-1000, 740, 75, -1000, 74, 708, -1000, -1000, 24, 366,
	-1000, 740, 740, 740, 740, 740, 740, 740, 740, 740,
	740, 740, 740, 740, 740, 740, 740, 740, 740, 740,
	740, 740, 740, 7, 7, 7, 7, -1000, 72, -1000,
	-46, -1000, -6, 740, 572, -41, -1000, -1000, 412, 740,
	412, 740, 740, 71, -1000, 34, 33, -15, 740, 334,
	-1000, 11, -1000, -33, -1000, -1000, 572, 95, 95, 7,
	7, 7, 7, 7, 697, 602, 776, 401, 401, 401,
	758, 758, 758, 758, 758, 758, 667, 643, -21, 412,
	-1000, -36, -1000, 613, -1000, -1000, 740, 302, 141, 572,
	-1000, 268, 4, -1000, -1000, -1000, -1000, -41, -1000, -1000,
	-1000, 412, 134, 31, -1000, 572, -16, -1000, 138, 740,
	412, 126, -1000, -1000, 740, -1000, 412, 740, 234, 125,
	-1000, 572, 123, 476, 412, 740, -1000, -1000, 412, 115,
	444, -1000, -1000, 412, 110, -1000,
}

var luaPgo = [...]int{
	0, 186, 55, 184, 167, 165, 182, 49, 52, 181,
	179, 178, 177, 22, 8, 0, 175, 5, 2, 4,
	173, 7, 170, 1, 148,
}

var luaR1 = [...]int{
	0, 1, 2, 2, 2, 2, 3, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 10, 10, 5, 5,
	5, 9, 11, 11, 12, 12, 6, 6, 13, 13,
	13, 14, 14, 7, 7, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 18,
	18, 18, 8, 8, 19, 19, 19, 19, 16, 17,
	17, 20, 20, 20, 21, 21, 22, 22, 22, 23,
	23, 23, 24, 24,
}

var luaR2 = [...]int{
	0, 1, 0, 1, 1, 2, 1, 2, 1, 3,
	1, 1, 1, 2, 3, 5, 4, 6, 8, 9,
	11, 7, 3, 4, 4, 2, 0, 5, 1, 2,
	3, 3, 1, 3, 1, 3, 1, 3, 1, 4,
	3, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 1,
	1, 3, 2, 4, 2, 3, 1, 1, 2, 5,
	4, 1, 1, 3, 2, 3, 1, 3, 2, 3,
	5, 1, 1, 1,
}

var luaChk = [...]int{
	-1000, -1, -2, -3, -5, -4, 21, 58, -6, -8,
	-9, 5, 13, 6, 25, 20, 14, 11, 12, 16,
	-13, -18, 34, 26, 52, -5, -4, -7, -15, 17,
	10, 23, 38, 37, 36, -16, -18, -21, 40, 18,
	45, 47, 12, -13, -8, 54, 51, 60, 26, -2,
	-15, -2, -15, 26, -14, -11, -12, 26, 12, -14,
	26, 56, 61, -19, 59, 52, -21, 37, 26, -15,
	58, 60, 39, 40, 41, 42, 33, 44, 43, 46,
	47, 48, 32, 31, 35, 49, 29, 50, 30, 27,
	28, 4, 19, -15, -15, -15, -15, -17, 52, 55,
	-22, -23, 26, 56, -15, -7, -13, 9, 6, 24,
	22, 51, 15, 60, -17, 59, 61, 26, 51, -15,
	26, 26, 53, -7, 34, 53, -15, -15, -15, -15,
	-15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
	-15, -15, -15, -15, -15, -15, -15, -15, -20, 53,
	36, -14, 55, -24, 60, 58, 51, -15, -2, -15,
	-2, -15, -7, 26, 26, 26, -17, -7, 57, -19,
	53, 53, -2, 60, -23, -15, 57, 9, -10, 60,
	6, -2, 9, 36, 51, 9, 7, 8, -15, -2,
	9, -15, -2, -15, 6, 60, 9, 9, 22, -2,
	-15, -2, 9, 6, -2, 9,
}

var luaDef = [...]int{
	2, -2, 1, 3, 4, 6, 28, 8, 0, -2,
	11, 12, 0, 2, 0, 2, 0, 0, 0, 0,
	-2, 0, 0, 38, 0, 5, 7, 29, 43, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 0, 0,
	0, 0, 0, 79, 80, 0, 0, 0, 13, 0,
	0, 0, 0, 41, 0, 0, 32, 34, 0, 25,
	41, 0, 0, 82, 0, 0, 86, 87, 0, 0,
	30, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 76, 77, 78, 88, 0, 94,
	0, 96, 38, 0, 101, 9, -2, 14, 2, 0,
	2, 0, 0, 0, 22, 0, 0, 0, 0, 0,
	40, 0, 84, 0, 31, 81, 44, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 0, 2,
	91, 92, 95, 98, 102, 103, 0, 0, 0, 16,
	26, 0, 0, 42, 33, 35, 23, 24, 39, 83,
	85, 2, 0, 0, 97, 99, 0, 15, 0, 0,
	2, 0, 90, 93, 0, 17, 2, 0, 0, 0,
	89, 100, 0, 0, 2, 0, 21, 18, 2, 0,
	0, 27, 19, 2, 0, 20,
}

var luaTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 45, 3, 43, 46, 3,
	52, 53, 41, 39, 60, 40, 61, 42, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 59, 58,
	49, 51, 50, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 56, 3, 57, 44, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 54, 48, 55, 47,
}

var luaTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 62,
}

var luaTok3 = [...]int{
	0,
}

var luaErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	luaDebug        = 0
	luaErrorVerbose = false
)

type luaLexer interface {
	Lex(lval *luaSymType) int
	Error(s string)
}

type luaParser interface {
	Parse(luaLexer) int
	Lookahead() int
}

type luaParserImpl struct {
	lval  luaSymType
	stack [luaInitialStackSize]luaSymType
	char  int
}

func (p *luaParserImpl) Lookahead() int {
	return p.char
}

func luaNewParser() luaParser {
	return &luaParserImpl{}
}

const luaFlag = -1000

func luaTokname(c int) string {
	if c >= 1 && c-1 < len(luaToknames) {
		if luaToknames[c-1] != "" {
			return luaToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func luaStatname(s int) string {
	if s >= 0 && s < len(luaStatenames) {
		if luaStatenames[s] != "" {
			return luaStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func luaErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !luaErrorVerbose {
		return "syntax error"
	}

	for _, e := range luaErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + luaTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := luaPact[state]
	for tok := TOKSTART; tok-1 < len(luaToknames); tok++ {
		if n := base + tok; n >= 0 && n < luaLast && luaChk[luaAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if luaDef[state] == -2 {
		i := 0
		for luaExca[i] != -1 || luaExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; luaExca[i] >= 0; i += 2 {
			tok := luaExca[i]
			if tok < TOKSTART || luaExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if luaExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += luaTokname(tok)
	}
	return res
}

func lualex1(lex luaLexer, lval *luaSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = luaTok1[0]
		goto out
	}
	if char < len(luaTok1) {
		token = luaTok1[char]
		goto out
	}
	if char >= luaPrivate {
		if char < luaPrivate+len(luaTok2) {
			token = luaTok2[char-luaPrivate]
			goto out
		}
	}
	for i := 0; i < len(luaTok3); i += 2 {
		token = luaTok3[i+0]
		if token == char {
			token = luaTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = luaTok2[1] /* unknown char */
	}
	if luaDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", luaTokname(token), uint(char))
	}
	return char, token
}

func luaParse(lualex luaLexer) int {
	return luaNewParser().Parse(lualex)
}

func (luarcvr *luaParserImpl) Parse(lualex luaLexer) int {
	var luan int
	var luaVAL luaSymType
	var luaDollar []luaSymType
	_ = luaDollar // silence set and not used
	luaS := luarcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	luastate := 0
	luarcvr.char = -1
	luatoken := -1 // luarcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		luastate = -1
		luarcvr.char = -1
		luatoken = -1
	}()
	luap := -1
	goto luastack

ret0:
	return 0

ret1:
	return 1

luastack:
	/* put a state and value onto the stack */
	if luaDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", luaTokname(luatoken), luaStatname(luastate))
	}

	luap++
	if luap >= len(luaS) {
		nyys := make([]luaSymType, len(luaS)*2)
		copy(nyys, luaS)
		luaS = nyys
	}
	luaS[luap] = luaVAL
	luaS[luap].yys = luastate

luanewstate:
	luan = luaPact[luastate]
	if luan <= luaFlag {
		goto luadefault /* simple state */
	}
	if luarcvr.char < 0 {
		luarcvr.char, luatoken = lualex1(lualex, &luarcvr.lval)
	}
	luan += luatoken
	if luan < 0 || luan >= luaLast {
		goto luadefault
	}
	luan = luaAct[luan]
	if luaChk[luan] == luatoken { /* valid shift */
		luarcvr.char = -1
		luatoken = -1
		luaVAL = luarcvr.lval
		luastate = luan
		if Errflag > 0 {
			Errflag--
		}
		goto luastack
	}

luadefault:
	/* default state action */
	luan = luaDef[luastate]
	if luan == -2 {
		if luarcvr.char < 0 {
			luarcvr.char, luatoken = lualex1(lualex, &luarcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if luaExca[xi+0] == -1 && luaExca[xi+1] == luastate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			luan = luaExca[xi+0]
			if luan < 0 || luan == luatoken {
				break
			}
		}
		luan = luaExca[xi+1]
		if luan < 0 {
			goto ret0
		}
	}
	if luan == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			lualex.Error(luaErrorMessage(luastate, luatoken))
			Nerrs++
			if luaDebug >= 1 {
				__yyfmt__.Printf("%s", luaStatname(luastate))
				__yyfmt__.Printf(" saw %s\n", luaTokname(luatoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for luap >= 0 {
				luan = luaPact[luaS[luap].yys] + luaErrCode
				if luan >= 0 && luan < luaLast {
					luastate = luaAct[luan] /* simulate a shift of "error" */
					if luaChk[luastate] == luaErrCode {
						goto luastack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if luaDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", luaS[luap].yys)
				}
				luap--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if luaDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", luaTokname(luatoken))
			}
			if luatoken == luaEofCode {
				goto ret1
			}
			luarcvr.char = -1
			luatoken = -1
			goto luanewstate /* try again in the same state */
		}
	}

	/* reduction by production luan */
	if luaDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", luan, luaStatname(luastate))
	}

	luant := luan
	luapt := luap
	_ = luapt // guard against "declared and not used"

	luap -= luaR2[luan]
	// luap is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if luap+1 >= len(luaS) {
		nyys := make([]luaSymType, len(luaS)*2)
		copy(nyys, luaS)
		luaS = nyys
	}
	luaVAL = luaS[luap+1]

	/* consult goto table to find next state */
	luan = luaR1[luan]
	luag := luaPgo[luan]
	luaj := luag + luaS[luap].yys + 1

	if luaj >= luaLast {
		luastate = luaAct[luag]
	} else {
		luastate = luaAct[luaj]
		if luaChk[luastate] != -luan {
			luastate = luaAct[luag]
		}
	}
	// dummy call; replaced with literal code
	switch luant {

	case 1:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.stmts = luaDollar[1].stmts
			if l, ok := lualex.(*Lexer); ok {
				l.Block = luaVAL.stmts
			}
		}
	case 2:
		luaDollar = luaS[luapt-0 : luapt+1]
		{
			luaVAL.stmts = []Stmt{}
		}
	case 3:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.stmts = luaDollar[1].stmts
		}
	case 4:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.stmts = []Stmt{luaDollar[1].stmt}
		}
	case 5:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.stmts = append(luaDollar[1].stmts, luaDollar[2].stmt)
		}
	case 6:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			if luaDollar[1].stmt != nil {
				luaVAL.stmts = []Stmt{luaDollar[1].stmt}
			} else {
				luaVAL.stmts = []Stmt{}
			}
		}
	case 7:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			if luaDollar[2].stmt != nil {
				luaVAL.stmts = append(luaDollar[1].stmts, luaDollar[2].stmt)
			} else {
				luaVAL.stmts = luaDollar[1].stmts
			}
		}
	case 8:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.stmt = nil
		}
	case 9:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.stmt = &AssignStmt{Left: luaDollar[1].exprs, Right: luaDollar[3].exprs}
			luaVAL.stmt.SetLine(luaDollar[1].exprs[0].Line())
		}
	case 10:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			if funstmt, ok := luaDollar[1].node.(*FuncCall); !ok {
				lualex.(*Lexer).Error("parse error")
			} else {
				luaVAL.stmt = funstmt
				luaVAL.stmt.SetLine(luaDollar[1].node.Line())
			}
		}
	case 11:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.stmt = luaDollar[1].stmt
		}
	case 12:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.stmt = &BreakStmt{}
			luaVAL.stmt.SetLine(luaDollar[1].token.line)
		}
	case 13:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.stmt = &GotoStmt{Name: &NameExpr{Value: luaDollar[2].token.Str}}
			luaVAL.stmt.SetLine(luaDollar[2].token.line)
		}
	case 14:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.stmt = &DoEndStmt{Block: luaDollar[2].stmts}
			luaVAL.stmt.SetLine(luaDollar[1].token.line)
			luaVAL.stmt.SetLastLine(luaDollar[3].token.line)
		}
	case 15:
		luaDollar = luaS[luapt-5 : luapt+1]
		{
			luaVAL.stmt = &WhileStmt{Condition: luaDollar[2].expr, Block: luaDollar[4].stmts}
			luaVAL.stmt.SetLine(luaDollar[1].token.line)
			luaVAL.stmt.SetLastLine(luaDollar[5].token.line)
		}
	case 16:
		luaDollar = luaS[luapt-4 : luapt+1]
		{
			luaVAL.stmt = &RepeatStmt{Condition: luaDollar[4].expr, Block: luaDollar[2].stmts}
			luaVAL.stmt.SetLine(luaDollar[1].token.line)
			luaVAL.stmt.SetLastLine(luaDollar[4].expr.Line())
		}
	case 17:
		luaDollar = luaS[luapt-6 : luapt+1]
		{
			luaVAL.stmt = &IfStmt{Condition: luaDollar[2].expr, Then: luaDollar[4].stmts}
			cur := luaVAL.stmt
			for _, elseif := range luaDollar[5].stmts {
				cur.(*IfStmt).Else = []Stmt{elseif}
				cur = elseif
			}
			luaVAL.stmt.SetLine(luaDollar[1].token.line)
			luaVAL.stmt.SetLastLine(luaDollar[6].token.line)
		}
	case 18:
		luaDollar = luaS[luapt-8 : luapt+1]
		{
			luaVAL.stmt = &IfStmt{Condition: luaDollar[2].expr, Then: luaDollar[4].stmts}
			cur := luaVAL.stmt
			for _, elseif := range luaDollar[5].stmts {
				cur.(*IfStmt).Else = []Stmt{elseif}
				cur = elseif
			}
			cur.(*IfStmt).Else = luaDollar[7].stmts
			luaVAL.stmt.SetLine(luaDollar[1].token.line)
			luaVAL.stmt.SetLastLine(luaDollar[8].token.line)
		}
	case 19:
		luaDollar = luaS[luapt-9 : luapt+1]
		{
			name := &NameExpr{Value: luaDollar[2].token.Str}
			luaVAL.stmt = &ForLoopNumStmt{Name: name, Init: luaDollar[4].expr, Limit: luaDollar[6].expr, Block: luaDollar[8].stmts}
			luaVAL.stmt.SetLine(luaDollar[1].token.line)
			luaVAL.stmt.SetLastLine(luaDollar[9].token.line)
		}
	case 20:
		luaDollar = luaS[luapt-11 : luapt+1]
		{
			name := &NameExpr{Value: luaDollar[2].token.Str}
			luaVAL.stmt = &ForLoopNumStmt{Name: name, Init: luaDollar[4].expr, Limit: luaDollar[6].expr, Step: luaDollar[8].expr, Block: luaDollar[10].stmts}
			luaVAL.stmt.SetLine(luaDollar[1].token.line)
			luaVAL.stmt.SetLastLine(luaDollar[11].token.line)
		}
	case 21:
		luaDollar = luaS[luapt-7 : luapt+1]
		{
			luaVAL.stmt = &ForLoopListStmt{Names: luaDollar[2].exprs, Exprs: luaDollar[4].exprs, Block: luaDollar[6].stmts}
			luaVAL.stmt.SetLine(luaDollar[1].token.line)
			luaVAL.stmt.SetLastLine(luaDollar[7].token.line)
		}
	case 22:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.stmt = luaDollar[2].stmt
			luaVAL.stmt.(*FuncDefStmt).Function = luaDollar[3].expr
			luaVAL.stmt.SetLine(luaDollar[3].expr.Line())
			luaVAL.stmt.SetLastLine(luaDollar[3].expr.LastLine())
		}
	case 23:
		luaDollar = luaS[luapt-4 : luapt+1]
		{
			name := &NameExpr{Value: luaDollar[3].token.Str}
			luaVAL.stmt = &LocalFuncDefStmt{Name: name, Function: luaDollar[4].expr}
			luaVAL.stmt.SetLine(luaDollar[1].token.line)
			luaVAL.stmt.SetLastLine(luaDollar[4].expr.LastLine())
		}
	case 24:
		luaDollar = luaS[luapt-4 : luapt+1]
		{
			luaVAL.stmt = &LocalVarDef{Names: luaDollar[2].exprs, Inits: luaDollar[4].exprs}
			luaVAL.stmt.SetLine(luaDollar[1].token.line)
		}
	case 25:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.stmt = &LocalVarDef{Names: luaDollar[2].exprs}
			luaVAL.stmt.SetLine(luaDollar[1].token.line)
		}
	case 26:
		luaDollar = luaS[luapt-0 : luapt+1]
		{
			luaVAL.stmts = []Stmt{}
		}
	case 27:
		luaDollar = luaS[luapt-5 : luapt+1]
		{
			ifstmt := &IfStmt{Condition: luaDollar[3].expr, Then: luaDollar[5].stmts}
			luaVAL.stmts = append(luaDollar[1].stmts, ifstmt)
			ifstmt.SetLine(luaDollar[2].token.line)
		}
	case 28:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.stmt = &ReturnStmt{Exprs: nil}
			luaVAL.stmt.SetLine(luaDollar[1].token.line)
		}
	case 29:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.stmt = &ReturnStmt{Exprs: luaDollar[2].exprs}
			luaVAL.stmt.SetLine(luaDollar[1].token.line)
		}
	case 30:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.stmt = &ReturnStmt{Exprs: luaDollar[2].exprs}
			luaVAL.stmt.SetLine(luaDollar[1].token.line)
		}
	case 31:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			name := &NameExpr{Value: luaDollar[2].token.Str}
			luaVAL.stmt = &LabelStmt{Name: name}
			luaVAL.stmt.SetLine(luaDollar[2].token.line)
		}
	case 32:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.stmt = &FuncDefStmt{Name: luaDollar[1].expr, Receiver: nil}
		}
	case 33:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			name := &NameExpr{Value: luaDollar[3].token.Str}
			name.SetLine(luaDollar[3].token.line)
			luaVAL.stmt = &FuncDefStmt{Name: name, Receiver: luaDollar[1].expr}
		}
	case 34:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = &NameExpr{Value: luaDollar[1].token.Str}
			luaVAL.expr.SetLine(luaDollar[1].token.line)
		}
	case 35:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			name := &NameExpr{Value: luaDollar[3].token.Str}
			name.SetLine(luaDollar[3].token.line)
			luaVAL.expr = &GetItemExpr{Table: luaDollar[1].expr, Key: name}
			luaVAL.expr.SetLine(luaDollar[3].token.line)
		}
	case 36:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.exprs = []Expr{luaDollar[1].expr}
		}
	case 37:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.exprs = append(luaDollar[1].exprs, luaDollar[3].expr)
		}
	case 38:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = &NameExpr{Value: luaDollar[1].token.Str}
			luaVAL.expr.SetLine(luaDollar[1].token.line)
		}
	case 39:
		luaDollar = luaS[luapt-4 : luapt+1]
		{
			luaVAL.expr = &GetItemExpr{Table: luaDollar[1].expr, Key: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 40:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			name := &NameExpr{Value: luaDollar[3].token.Str}
			name.SetLine(luaDollar[3].token.line)
			luaVAL.expr = &GetItemExpr{Table: luaDollar[1].expr, Key: name}
			luaVAL.expr.SetLine(luaDollar[3].token.line)
		}
	case 41:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			name := &NameExpr{Value: luaDollar[1].token.Str}
			name.SetLine(luaDollar[1].token.line)
			luaVAL.exprs = []Expr{name}
		}
	case 42:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			name := &NameExpr{Value: luaDollar[3].token.Str}
			name.SetLine(luaDollar[3].token.line)
			luaVAL.exprs = append(luaDollar[1].exprs, name)
		}
	case 43:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.exprs = []Expr{luaDollar[1].expr}
		}
	case 44:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.exprs = append(luaDollar[1].exprs, luaDollar[3].expr)
		}
	case 45:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = &NilExpr{}
			luaVAL.expr.SetLine(luaDollar[1].token.line)
		}
	case 46:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = &FalseExpr{}
			luaVAL.expr.SetLine(luaDollar[1].token.line)
		}
	case 47:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = &TrueExpr{}
			luaVAL.expr.SetLine(luaDollar[1].token.line)
		}
	case 48:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = &NumberExpr{Value: luaDollar[1].token.Str}
			luaVAL.expr.SetLine(luaDollar[1].token.line)
		}
	case 49:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = &StringExpr{Value: luaDollar[1].token.Str}
			luaVAL.expr.SetLine(luaDollar[1].token.line)
		}
	case 50:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = &AnyExpr{}
			luaVAL.expr.SetLine(luaDollar[1].token.line)
		}
	case 51:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = luaDollar[1].expr
		}
	case 52:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = luaDollar[1].expr
		}
	case 53:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = luaDollar[1].expr
		}
	case 54:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 55:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 56:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 57:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 58:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 59:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 60:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 61:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 62:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 63:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 64:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 65:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 66:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 67:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 68:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 69:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 70:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 71:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 72:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 73:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 74:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TwoOpExpr{Operator: luaDollar[2].token.Str, Left: luaDollar[1].expr, Right: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].expr.Line())
		}
	case 75:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.expr = &OneOpExpr{Operator: luaDollar[1].token.Str, Target: luaDollar[2].expr}
			luaVAL.expr.SetLine(luaDollar[2].expr.Line())
		}
	case 76:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.expr = &OneOpExpr{Operator: luaDollar[1].token.Str, Target: luaDollar[2].expr}
			luaVAL.expr.SetLine(luaDollar[2].expr.Line())
		}
	case 77:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.expr = &OneOpExpr{Operator: luaDollar[1].token.Str, Target: luaDollar[2].expr}
			luaVAL.expr.SetLine(luaDollar[2].expr.Line())
		}
	case 78:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.expr = &OneOpExpr{Operator: luaDollar[1].token.Str, Target: luaDollar[2].expr}
			luaVAL.expr.SetLine(luaDollar[2].expr.Line())
		}
	case 79:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = luaDollar[1].expr
		}
	case 80:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			if funcnode, ok := luaDollar[1].node.(*FuncCall); !ok {
				lualex.(*Lexer).Error("parse error")
			} else {
				luaVAL.expr = funcnode
				luaVAL.expr.SetLine(luaDollar[1].node.Line())
			}
		}
	case 81:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = luaDollar[2].expr
			luaVAL.expr.SetLine(luaDollar[1].token.line)
		}
	case 82:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.node = &FuncCall{Function: luaDollar[1].expr, Args: luaDollar[2].exprs}
			luaVAL.node.SetLine(luaDollar[1].expr.Line())
		}
	case 83:
		luaDollar = luaS[luapt-4 : luapt+1]
		{
			name := &NameExpr{Value: luaDollar[3].token.Str}
			name.SetLine(luaDollar[3].token.line)
			luaVAL.node = &FuncCall{Function: name, Receiver: luaDollar[1].expr, Args: luaDollar[4].exprs}
			luaVAL.node.SetLine(luaDollar[1].expr.Line())
		}
	case 84:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.exprs = []Expr{}
		}
	case 85:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.exprs = luaDollar[2].exprs
		}
	case 86:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.exprs = []Expr{luaDollar[1].expr}
		}
	case 87:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			str := &StringExpr{Value: luaDollar[1].token.Str}
			str.SetLine(luaDollar[1].token.line)
			luaVAL.exprs = []Expr{str}
		}
	case 88:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.expr = luaDollar[2].expr
		}
	case 89:
		luaDollar = luaS[luapt-5 : luapt+1]
		{
			luaVAL.expr = &FuncDefExpr{Param: luaDollar[2].expr, Block: luaDollar[4].stmts}
			luaVAL.expr.SetLine(luaDollar[1].token.line)
			luaVAL.expr.SetLastLine(luaDollar[5].token.line)
		}
	case 90:
		luaDollar = luaS[luapt-4 : luapt+1]
		{
			luaVAL.expr = &FuncDefExpr{Param: nil, Block: luaDollar[3].stmts}
			luaVAL.expr.SetLine(luaDollar[1].token.line)
			luaVAL.expr.SetLastLine(luaDollar[4].token.line)
		}
	case 91:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = &ParamExpr{IsAny: true}
			luaVAL.expr.SetLine(luaDollar[1].token.line)
		}
	case 92:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = &ParamExpr{Params: luaDollar[1].exprs, IsAny: false}
		}
	case 93:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &ParamExpr{Params: luaDollar[1].exprs, IsAny: true}
		}
	case 94:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.expr = &TableExpr{Fields: []Expr{}}
			luaVAL.expr.SetLine(luaDollar[1].token.line)
		}
	case 95:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.expr = &TableExpr{Fields: luaDollar[2].exprs}
			luaVAL.expr.SetLine(luaDollar[1].token.line)
		}
	case 96:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.exprs = []Expr{luaDollar[1].expr}
		}
	case 97:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			luaVAL.exprs = append(luaDollar[1].exprs, luaDollar[3].expr)
		}
	case 98:
		luaDollar = luaS[luapt-2 : luapt+1]
		{
			luaVAL.exprs = luaDollar[1].exprs
		}
	case 99:
		luaDollar = luaS[luapt-3 : luapt+1]
		{
			name := &NameExpr{Value: luaDollar[1].token.Str}
			luaVAL.expr = &FieldExpr{Key: name, Value: luaDollar[3].expr}
			luaVAL.expr.SetLine(luaDollar[1].token.line)
		}
	case 100:
		luaDollar = luaS[luapt-5 : luapt+1]
		{
			luaVAL.expr = &FieldExpr{Key: luaDollar[2].expr, Value: luaDollar[5].expr}
			luaVAL.expr.SetLine(luaDollar[2].expr.Line())
		}
	case 101:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = &FieldExpr{Value: luaDollar[1].expr}
		}
	case 102:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = &NameExpr{Value: luaDollar[1].token.Str}
		}
	case 103:
		luaDollar = luaS[luapt-1 : luapt+1]
		{
			luaVAL.expr = &NameExpr{Value: luaDollar[1].token.Str}
		}
	}
	goto luastack /* stack new state and value */
}
